accessible: true
author: Pierre Schaus
context: |+
    Context
    ==================================================

    Assume the following 5x5 matrix:

    .. code-block:: java

        int [][] tab = new int[][] {{1,3,3,1,3},
                                  {4,2,2,4,5},
                                  {4,4,1,4,2},
                                  {1,4,2,3,6},
                                  {1,1,1,6,3}};

    represented in the array here under:

    .. image:: bilan_m2_global_warming/matrix.png
                    :width: 200px
                    :align: center
                    :alt: matrix example

    Each entry of the matrix represents an altitude.
    The objective is to implement a class `GlobalWarmingImpl` that the method described in `GlobalWarming` given next.

    Given a global water level, all the positions of the matrix with a value <= the water level are flooded (under the water) and thus unsafe. So assuming the water level is 3, all the safe points are green.

    The methods you must implement is

    * the computations of the number of safe-points given a specified water level


    .. code-block:: java


       import java.util.List;

       abstract class GlobalWarming {

           /**
            * A class to represent the coordinates on the altitude matrix
            */
           public static class Point {

               final int x, y;

               Point(int x, int y) {
                   this.x = x;
                   this.y = y;
               }

               @Override
               public boolean equals(Object obj) {
                   Point p = (Point) obj;
                   return p.x == x && p.y == y;
               }
           }

           final int[][] altitude;


           /**
            * @param altitude is a n x n matrix of int values representing altitudes (positive or negative)
            */
           public GlobalWarming(int[][] altitude) {
               this.altitude = altitude;
           }

           /**
            *
            * @param waterLevel
            * @return the number of entries in altitude matrix that would be above
            *         the specified waterLevel.
            *         Warning: this is not the waterLevel given in the constructor/
            */
           public abstract int nbSafePoints(int waterLevel);

       }



    Preliminary exercises
    ==================================================


    .. code-block:: java

        int [][] tab = new int[][] {{1,3,3,1,3},
                                  {4,2,2,4,5},
                                  {4,4,1,4,2},
                                  {1,4,2,3,6},
                                  {1,1,1,6,3}};
        GlobalWarming gw = new MyGlobalWarming(tab);

    .. image:: global_warming/matrix.png
                    :width: 200px
                    :align: center
                    :alt: matrix example


environment: java8scala
evaluate: best
groups: false
limits:
    time: '120'
    output: '100'
    memory: '750'
name: 'Bilan M3: Global Warming'
network_grading: false
problems:
    nbSafePoints:
        type: match
        answer: '14'
        header: |-
            What would be the result of

            .. code-block:: java

                gw.nbSafePoints(2)


            expected: a number
        name: nbSafePoints
    implementation:
        header: |+
            Copy-paste and complete the code below.
            Be careful with the expected time-complexity in each method.
            To meet these time-complexity some precomputation should already be done in the constructor. Don't hesitate to create inner classes in GlobalWarmingImpl to facilitate your implementation.
            Feel free to use any method or data-structure available in the Java language and API.

            .. code-block:: java

               import java.util.*;

               public class GlobalWarmingImpl extends GlobalWarming {

                   public GlobalWarmingImpl(int[][] altitude) {
                       super(altitude);
                       // expected pre-processing time in the constructror : O(n^2 log(n^2))
                       // TODO
                   }


                   public int nbSafePoints(int waterLevel) {
                       // TODO
                       // expected time complexity O(log(n^2))
                       return 0;
                   }

               }




        name: ''
        type: code
        language: java
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
weight: 1.0
