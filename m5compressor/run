#! /bin/bash

################
# Configuration
################
problemId="compressor"
studentCodeName="Compress"
interfaceName=""
testsName="CompressProps"
forbiddenClasses=(
	"java.util.TreeMap"
	"java.util.concurrent.ConcurrentSkipListMap"
	"Arrays.sort"
)

# Specific for this test
export JAVA_TOOL_OPTIONS=-Dfile.encoding=UTF8
getinput decompressor > student/Decompress.java

# To avoid problems with encoding
n=4 # number of tests in CompressProps.scala, don't forget to change this variable if you modify it !
getinput compressor > student/Compress.java

# Compile the student code and parse it properly
compilationMessage=$(javac -cp .:iobitstream.jar student/Compress.java student/Decompress.java 2>&1)
compilationMessage=$(echo "$compilationMessage" | sed -e 's/^/\t/' | sed -e 's/%/%%%/g')
compilationMessage=$(printf "Compilation failed :\n::\n\n $compilationMessage")
if [ ! -f student/Compress.class ] || [ ! -f student/Decompress.class ]; then
    feedback --result failed --feedback "$compilationMessage"
    exit 0
fi

# Copy everything in the 'student' directory for run_student
cp CompressProps.scala student/CompressProps.scala
cp iobistream.jar student/iobistream.jar
cp scalacheck.jar student/scalacheck.jar
cd student
scalac -cp .:scalacheck.jar:iobitstream.jar CompressProps.scala
output=$(run_student scala -cp .:scalacheck.jar:iobitstream.jar CompressProps)
r=$?
cd ..

if [ "$r" = "252" ]; then
	feedback --result failed --feedback "Command was killed due to an out-of-memory"
elif [ "$r" = "253" ]; then
	feedback --result timeout --feedback "Command timed out"
elif [ "$r" = "254" ]; then
    feedback --result failed --feedback "Unfortunately, a runtime error occured"
else
	failed=$(echo "$output" | grep -c "Falsified")
	passed=$(echo "$output" | grep -c "OK")
	infos=$(echo "$output" | grep -o '! \w*.\w*')

	if [ "$failed" = "0" ] && [ "$passed" = "0" ]; then
    	feedback --result failed --feedback "It seems like an internal error occured. If this persists, please contact your course administrator. "
	elif [ $(($passed+$failed)) != $n ]; then
		feedback --result failed --feedback "It seems like an error occured during the execution of your code. It probably comes from InputBitStream or OutputBitStream ($passed passed, $failed failed out of $n tests)"
	elif [ "$failed" = "0" ]; then
		feedback --result success --feedback "Congratulations, you passed the $passed tests!"
	else
		feedback --result failed --feedback "Unfortunately, you failed $failed tests out of $(($passed+$failed)) : $infos"
	fi
fi
