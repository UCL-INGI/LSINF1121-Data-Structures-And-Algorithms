accessible: /2015-11-13 19:04:29
author: Simon Hardy
context: |
    For this mission, you have to write a plagiarism detector (a class named "Plagiarism") implementing the following interface :

    .. code-block:: java

        import java.util.Map.Entry;
        import java.util.Set;

        /* A class implementing this interface should have a constructor taking two arguments :
         * - The path to the folder where lies the corpus of documents,
         * - The number 'w' of characters from which we consider that a sentence is plagiarized. */
        public interface PlagiarismInterface {

            /* @pre : 'doc' is the path to a text file
             * @post : searches for plagiarized sentences of at least 'w' characters between 'doc' and all text files in 'corpus'.
             * returns a set of (document name, position) for each plagiarized sentence found in a corpus file
             * ('position' is the position of the first character of the first occurence of that sentence in the corpus files, starting at 0 and considering the alphabetical order of the files) */
            public Set<Entry<String, Integer>> detect(String doc);

        }

    In order to have an efficient detector, you will have to use Map (a class named "HashMap") implementing this interface (be aware that this interface changed a little bit since the unit tests :  the parameters of the *incrementalHashCode* are different, and the type of keys is now generic):

    .. code-block:: java

        /* A Map creates mappings between objects of type K and V.
         * A class implementing this interface should have at least one constructor
         * with no argument, initializing the map.
         */
        public interface MapInterface<K, V> {

            public V get(K key);

            /* Same as 'get(key)', but instead of hashing 'key', the map will directly use 'hashCode'
             * and check if there is indeed an entry with key 'key' */
            public V get(K key, int hashCode);

            public void put(K key, V value);

            /* Same as 'put(key, value)', but instead of hashing 'key',
             * it will directly use 'hashCode' */
            public void put(K key, V value, int hashCode);

            public int size();

            /* Returns the hash of the K 'key'
             * Complexity required : O(m) */
            public int hashCode(K key);

            /* Returns the hash of the key with length 'keyLength' and whose last character is 'lastKeyChar',
             * based on the previous hash 'lastHash' and on the previous character leading the sentence 'lastChar'
             * Complexity required : O(1) */
            public int incrementalHashCode(int keyLength, int lastKeyChar, int lastHash, int lastChar);

        }

    For more information about the unspecified methods of *MapInterface*, see the Java Map interface (http://docs.oracle.com/javase/7/docs/api/java/util/Map.html).
environment: java8scala
groups: true
limits:
    memory: '512'
    output: '100'
    time: '20'
name: Mission 4 - Plagiarism detector [group]
network_grading: false
order: 20
problems:
    plagiarism:
        name: Plagiarism detector
        allowed_exts:
        - .java
        type: code-file
        header: Upload your plagiarism detector here. Your class should be named "Plagiarism"
            and implement *PlagiarismInterface*. **Don't include the interface in
            your submission.**
    hashmap:
        type: code-file
        header: Upload your map implementation here. Your class should be named "HashMap"
            and implement *MapInterface*. **Don't include the interface in your submission.**
        allowed_exts:
        - .java
        name: HashMap
weight: 1.0
