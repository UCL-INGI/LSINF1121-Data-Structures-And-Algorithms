#! /bin/bash
# BuggyCompress1 : wrong output (only bits set to 1)
# BuggyCompress2 : wrong output (first character missing)
# BuggyCompress3 : returns an exception on empty file
# BuggyCompress4 : wrong output for long files (doesn't process input file after 100 characters)
# BuggyCompress5 : compressed file too large (larger than input file !), but output correct

# To avoid problems with encoding
export JAVA_TOOL_OPTIONS=-Dfile.encoding=UTF8

tot=6 # number of tests
name="Compress"
testName="CompressTests"
word="compressor"

getinput tests > "student/$testName.java"
cp junit-4.12.jar student/junit-4.12.jar
cp hamcrest-core-1.3.jar student/hamcrest-core-1.3.jar
cp Compress.java student/Compress.java
cp Decompress.java student/Decompress.java
cp InputBitStream.class student/InputBitStream.class
cp OutputBitStream.class student/OutputBitStream.class
cd student

n=0 # number of tests passed
passOk=0
failOk=0
buggyName="Buggy$name"
oldName="$name"
count=0
sequence="fail :"
for i in $(seq 1 $tot)
do
	((count++))
	cp "../${name}.java" "./${oldName}.java"
	name="${buggyName}${i}"

	javac "${oldName}.java"

	# Compile the student code and parse it properly
	compilationMessage=$(javac -cp .:junit-4.12.jar "${testName}.java" 2>&1)
	compilationMessage=$(echo "$compilationMessage" | sed -e 's/^/\t/' | sed -e 's/%/%%%/g')
	compilationMessage=$(printf "Compilation of $testName.java failed :\n::\n\n $compilationMessage")
	if [ ! -f "$testName.class" ]; then
    	feedback --result failed --feedback "$compilationMessage"
    	exit 0
	fi

	output=$(run_student java -cp .:junit-4.12.jar:hamcrest-core-1.3.jar org.junit.runner.JUnitCore "$testName")
    r=$?
    
	if [ "$r" = "252" ]; then
		feedback --result failed --feedback "Command was killed due to an out-of-memory"
		exit 0
	elif [ "$r" = "253" ]; then
		feedback --result timeout --feedback "Command timed out"
		exit 0
	elif [ "$r" = "254" ]; then
	      feedback --result failed --feedback "Unfortunately, a runtime error occured"
		exit 0
	fi

	failed=$(echo "$output" | grep -c "FAILURES")
    passed=$(echo "$output" | grep -c "OK")

	if [ "$i" = "1" ] && [ "$failed" = "0" ] && [ "$passed" != "0" ]; then
		((n++))
		((passOk++))
	fi

	if [ "$i" != "1" ] && [ "$failed" = "1" ] && [ "$passed" = "0" ]; then
		((n++))
        if [ "$count" = "1" ]; then
        	sequence="Test $count "
        	
        fi
        
        if [ "$count" = "2" ]; then
        	sequence="Test $count  "
        fi
        
        if [ "$count" = "3" ]; then
        	sequence="Test $count "
        fi
        
        if [ "$count" = "4" ]; then
        	sequence="Test $count "
        fi
        
        if [ "$count" = "5" ]; then
        	sequence="Test $count "
        fi
        ((failOk++))
	fi
done
cd ..

if [ "$n" = "0" ]; then
	feedback --result failed --feedback "It seems like an internal error occured. If this persists, please contact your course administrator. "
elif [ "$passOk" != "1" ]; then
	feedback --result failed --feedback "you detected an error in a correct $word implementation "
elif [ "$n" = "$tot" ]; then
	feedback --result success --feedback "Congratulations, you passed the $n tests!"
else
    incorrect=$(($tot-1))
	lack=$(($incorrect-$failOk))
	feedback --result failed --feedback "Unfortunately, you didn't detect errors in $lack (out of $incorrect) incorrect ${word} implementations. $sequence"
fi