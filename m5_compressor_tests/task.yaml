accessible: /2015-11-20 20:36:52
author: Simon Hardy
context: |-
    For this task, you have to write unit tests using JUnit in order to check several implementations of compressors and decompressors. You are given two classes, *Compress* and *Decompress*, and you have to determine if they do their job correctly or not. We provide you a small template to begin writing your tests :

    The tests will give you some hints on what error you do not detect correctly, use those hints. Here are some other hints to help you not beeing stuck on the tests for too long :

    - Try to test simple cases, then with "limit cases".

    - Do not forget simply to test "what the program is designed for".

    - Do not dive into long "for loops", simple tests will give you a very fast success.

    - You can reuse the files that are generated in the compress_decompress function, but don't change the code of that function.

    - DO NOT DO A TEST THAT THROWS ERROR RANDOMLY AND THEN SUBMIT IT 300 TIMES, HOPING IT WILL HOPEFULLY PASS ALL THE TESTS. YOU LEARN NOTHING BY DOING THAT. Moreover, when we will grade your participation to the course, we will check your codes and change the grades accordingly. If you "cheated" for the success, it won't be considered as a success and does not give us a good image of what you are able to do.

    - That could be useful : http://docs.oracle.com/javase/8/docs/api/java/io/File.html

    - You do not have to test empty files for this task.


    .. code-block:: java

        import org.junit.Test;
        import static org.junit.Assert.assertEquals;
        import static org.junit.Assert.assertTrue;
        import static org.junit.Assert.fail;
        import java.io.PrintWriter;
        import java.util.Scanner;
        import java.io.IOException;
        import java.io.File;

        public class CompressTests {

            @Test
            public void firstTest() {
                try {
                    String str = "abcdefg";
                    assertEquals(compress_decompress(str), str);
                } catch (Exception e) {
                    fail("Exception occured : " + e);
                }
            }

            @Test
            public void secondTest() {
                    // ...
            }

            public String compress_decompress(String content) throws IOException {
                PrintWriter writer = new PrintWriter("./input.txt");
                writer.println(content);
                writer.close();
                Compress.main(new String[]{"./input.txt", "./compressed.txt"});
                Decompress.main(new String[]{"./compressed.txt", "./output.txt"});
                Scanner scanner = new Scanner(new File("./output.txt"));
                String str = scanner.useDelimiter("\\Z").next();
                scanner.close();
                return str;
            }
        }

    NB : you don't know the internal representation of the compressed file, but you can still check some of its properties : for example, a long file with only high-frequency characters should have a pretty good compression rate.
environment: java8scala
evaluate: best
groups: false
limits:
    memory: '512'
    output: '100'
    time: '30'
name: Mission 5 - Unit tests [individual]
network_grading: false
order: 24
problems:
    tests:
        type: code-file
        name: Unit tests for the compressor
        allowed_exts:
        - .java
        header: 'Upload your file here, with only one class named *CompressTests*.
            The classes representing the compressor and decompressor under test are
            respectively named *Compress* and *Decompress*, as written in the template. '
stored_submissions: 0
weight: 1.0
