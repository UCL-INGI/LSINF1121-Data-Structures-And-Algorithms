accessible: false
author: Simon Hardy
context: |-
    Recall the SpamFiltering interface :

    .. code-block:: java

        import java.util.HashSet;

        /* The constructor takes a String as argument, representing the path to the input file */
        public interface SpamFiltering {

            /* Returns a map (our Map interface, for example your custom type MyMap) containing mappings
             * between the Strings appearing in each sms of the input file,
             * and objects of type WordInterface (custom type too) containing
             * correct informations about them (see below)
             * Convention : use the regex "\\W+" to split the content of a message into words, and use toLowerCase() on what you read so that your map doesn't contain any upper case letter. */
            public Map<String, WordInterface> getWordsMap();

            /* Returns a HashSet (java.util.HashSet) containing the stop words listed below */
            public HashSet<String> getStopWords();

            /* Computes the probability that 'message' is a spam sms, using the naive Bayes formula (see pdf of the mission) */
            public double naiveBayes(String message);

            /* Returns true if 'message' is classified as a spam sms, false otherwise (a sms is considered as spam if the probability is strictly greater than 50%) */
            public boolean classify(String message);

        }

    You are asked to write unit tests (using JUnit) in order to check wether a particular implementation of this interface is correct.

    Here is a simple template you can use to write your tests :

    .. code-block:: java

        import org.junit.Test;
        import static org.junit.Assert.assertEquals;
        import static org.junit.Assert.assertTrue;

        /* input1.txt contains the following :
         * ham    Hi Simon how are you today ?? */
        public class SpamFilterTests {

            @Test
            public void firstTest() {
            SpamFiltering spamFilter = new SpamFilter("input1.txt");
            Map<String, WordInterface> map = spamFilter.getWordsMap();
                assertTrue(map.containsKey("hi"));
                assertTrue(!map.containsKey("Hi"));
                assertTrue(map.containsKey("today"));
                assertTrue(!map.containsKey("ham"));
                assertTrue(!map.containsKey("??"));
            }

            @Test
            public void secondTest() {
                ...
            }
        }
environment: java8scala
evaluate: best
groups: false
limits:
    output: '100'
    time: '60'
    memory: '512'
name: '[Old] Mission 4 - Unit tests for the spam filter [individual]'
network_grading: false
order: 36
problems:
    filter_tests:
        type: code-file
        allowed_exts:
        - .java
        header: Upload your file here, with only one class named "SpamFilterTests".
            The class representing the spam filter under test is called *SpamFilter*
            and implements *SpamFiltering*, as written in the template !
        name: Unit tests for the spam filter
    archive:
        max_size: 5000000
        name: Archive with inputs as text files
        allowed_exts:
        - .zip
        header: 'Upload the archive containing your .txt files here. It will be unzipped
            in the same directory as your *SpamFilterTests* class. Don''t forget that
            if you zip a directory (instead of your .txt files directly), then you
            will have to write "dir/file.txt" in your tests instead of just "file.txt". '
        type: code-file
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
weight: 1.0
