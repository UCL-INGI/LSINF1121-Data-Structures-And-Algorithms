accessible: false
author: Simon Hardy
context: |-
    For this mission, you have to write a spam filter (a class named "SpamFilter") implementing the following interface :

    .. code-block:: java

        import java.util.HashSet;

        /* The constructor takes a String as argument, representing the path to the input file */
        public interface SpamFiltering {

            /* Returns a map (our Map interface, for example your custom type MyMap) containing mappings
             * between the Strings appearing in each sms of the input file,
             * and objects of type WordInterface (custom type too) containing
             * correct informations about them (see below)
             * Convention : use the regex "\\W+" to split the content of a message into words, and use toLowerCase() on what you read so that your map doesn't contain any upper case letter. */
            public Map<String, WordInterface> getWordsMap();

            /* Returns a HashSet (java.util.HashSet) containing the stop words listed below */
            public HashSet<String> getStopWords();

            /* Computes the probability that 'message' is a spam sms, using the naive Bayes formula (see pdf of the mission) */
            public double naiveBayes(String message);

            /* Returns true if 'message' is classified as a spam sms, false otherwise (a sms is considered as spam if the probability is strictly greater than 50%) */
            public boolean classify(String message);

        }

    To implement this spam filter, you will need to first implement 2 other interfaces : Map (which is the same as for the individual part), and WordInterface detailed below :

    .. code-block:: java

        /* The constructor takes a String as argument, representing the corresponding English word */
        public interface WordInterface {

            /* Returns the English word represented by this object */
            public String getWord();

            /* Returns the probability that a sms containing only this word once is a spam (see pdf of the mission for the formula) */
            public double getSpamProba();

            /* Returns the probability that a sms containing only this word once is a ham (not a spam) */
            public double getHamProba();

            /* Returns the number of occurences of this word in the concatenation of every sms in the input file */
            public int getOccurences();

            /* Optional */
            public String toString();
        }
environment: java8scala
evaluate: best
groups: true
limits:
    memory: '512'
    output: '100'
    time: '30'
name: '[Old] Mission 4 - Spam filter [group]'
network_grading: false
order: 49
problems:
    classifier:
        header: 'Upload your spam filter here. Your class should be named "SpamFilter"
            and implement *SpamFiltering*. '
        name: Spam filter
        allowed_exts:
        - .java
        type: code-file
    map:
        type: code-file
        name: Map
        header: 'Upload your map here. Your class should be named "MyMap" and implement
            the interface *Map* given in the other part of the mission (it can be
            the same as the map submitted for this other part). '
        allowed_exts:
        - .java
    word:
        type: code-file
        header: 'Upload your class Word here. It should be named "Word" and implement
            *WordInterface*. '
        allowed_exts:
        - .java
        name: Word
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
weight: 0.0
