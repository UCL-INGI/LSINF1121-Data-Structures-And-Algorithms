accessible: false
author: Pierre Schaus
context: |-
    On s’intéresse à l'implémentation d'une `type abstrait File` (Queue, en anglais). Pour ce faire on utilise une ``liste simplement chaînée circulaire``, c’est-à-dire une liste pour laquelle la dernière position de la liste fait référence, comme position suivante, à la première position de la liste.(`voir un exemple ici </course/LSINF1121-2016/p1circularlinkedlist/CircularLinkedList.png>`_ ).
    L’ajout d’un nouvel élément dans la file (méthode ``enqueue``) se fait en fin de liste et le retrait (méthode ``remove``) se fait en début de liste. Une (seule) référence sur la fin de la liste (``last``) est nécessaire pour effectuer toutes les opérations sur cette file.

    Il vous est donc demander d'implémenter cette liste simplement chaînée à partir de la classe ``CircularLinkedList.java`` où vous devez completer les méthodes d'ajout (``enqueue``) et de retrait (``remove``) ainsi que un itérateur (``ListIterator``) qui permet de parcourir la liste en LIFO.
    *Attention:* un itérateur ne peut être modifié au cours de son utilisation

    `Le projet IntelliJ est disponible ici </course/LSINF1121-2016/p1circularlinkedlist/LSINF1121CircularLinkedList.zip>`_.
environment: java8scala
evaluate: best
groups: false
input_random: '0'
limits:
    memory: '1000'
    output: '2'
    time: '300'
name: 'PART 1: Circular linkedlist (Implem)'
network_grading: false
order: 3
problems:
    implementation:
        language: java
        name: Implementation de CircularLinkedList.java
        type: code
        header: |-
            .. code-block:: java

               package student;

               import java.util.ConcurrentModificationException;
               import java.util.Iterator;
               import java.util.NoSuchElementException;

               public class CircularLinkedList<Item> implements Iterable<Item> {
                private long nOp = 0; // count the number of operations
                private int n;          // size of the stack
                private Node  last;   // trailer of the list

                // helper linked list class
                private class Node {
                    private Item item;
                    private Node next;
                }

                public CircularLinkedList() {
                    last = null;
                    n = 0;
                }

                public boolean isEmpty() {
                    return n == 0;
                }

                public int size() {
                    return n;
                }

                private long nOp() {
                    return nOp;
                }



                /**
                 * Append an item at the end of the list
                 * @param item the item to append
                 */
                public void enqueue(Item item) {
                    // TODO STUDENT: Implement add method
                }

                /**
                 * Removes the element at the specified position in this list.
                 * Shifts any subsequent elements to the left (subtracts one from their indices).
                 * Returns the element that was removed from the list.
                 */
                public Item remove(int index) {
                    // TODO STUDENT: Implement remove method
                }


                /**
                 * Returns an iterator that iterates through the items in FIFO order.
                 * @return an iterator that iterates through the items in FIFO order.
                 */
                public Iterator<Item> iterator() {
                    return new ListIterator();
                }

                /**
                 * Implementation of an iterator that iterates through the items in FIFO order.
                 *
                 */
                private class ListIterator implements Iterator<Item> {
                    // TODO STUDDENT: Implement the ListIterator
                }

               }


            Copier votre implementation complète de ``CircularLinkedList.java`` ci-desssous en completant la classe au niveau des `TODO STUDDENT`. Ne chamgez surtout pas le nom du package et les signatures des méthodes.
        default: ''
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags: {}
weight: 1.0
