accessible: false
author: Simon Hardy
context: |-
    For this mission you will have to implement the following interface, representing an expression tree.

    .. code-block:: java

        /**
         * Un "FormalExpressionTree" est un arbre permettant de mémoriser
         * et de manipuler une expression analytique.
         *
         * Une classe implémentant cette interface doit disposer d'un CONSTRUCTEUR
         * prenant comme argument une chaîne de caractères (String) et construisant
         * l'arbre associé.
         * Cette chaîne est supposée correspondre à une expression analytique
         * syntaxiquement correcte et complètement parenthésée.
         * Lorsque cette précondition n'est pas vérifiée, une  ParseException (classe à implémenter) doit être lancée.
         * Un CONSTRUCTEUR sans argument ou avec l'expression vide "" comme argument
         * permet de construire un arbre élémentaire correspondant à l'expression "0"
         */
        public interface FormalExpressionTree {
          /**
           * Cette méthode renvoie une chaîne de caractères correspondant à
           * l'expression analytique représentée dans l'arbre.
           *
           * @pre  this représente une expression analytique syntaxiquement correcte
           * @post une chaîne de caractères, correspondant à l'expression analytique
           *       complètement parenthésée représentée par this, est renvoyée.
           */
          public String toString();

          /**
           * Cette méthode calcule le nouvel arbre correspondant à la dérivée formelle
           * de l'arbre courant. L'arbre courant (this) n'est pas modifié.
           *
           * @pre   this représente une expression analytique syntaxiquement correcte.
           * @post  Une référence à un nouvel arbre représentant la dérivée formelle
           *        de this est renvoyée.
           */
          public FormalExpressionTree derive();
        }

    NB : it's not necessary to simplify the derivatives. For example, for input "(2*x)", you can return "2" or "((0*x)+(2*1))".
environment: java8scala
evaluate: best
groups: true
limits:
    memory: '512'
    output: '100'
    time: '45'
name: '[Old] Mission 2 - Formal expression tree [group]'
network_grading: false
order: 37
problems:
    tree:
        type: code-file
        name: Expression tree
        allowed_exts:
        - .java
        header: 'Upload the file containing your implementation here. The class representing
            your tree should be named *ExpressionTree* and implement *FormalExpressionTree*.
            If you need other classes, put them in the same file but without any *public*
            modifier. '
    exception:
        header: 'Upload the file containing your custom exception here. The class
            should be named *ParseException*. '
        name: ParseException
        allowed_exts:
        - .java
        type: code-file
        max_size: 1000000
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
weight: 0.0
