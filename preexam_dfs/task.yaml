accessible: false
author: ''
context: |-
    Consider this class, ``DepthFirstPaths``, that computes paths to any connected node from a source node ``s`` in an undirected graph.

    .. code-block:: java

        // TODO

        public class DepthFirstPaths {
            private boolean[] marked; // marked[v] = is there an s-v path?
            private int[] edgeTo;     // edgeTo[v] = last edge on s-v path
            private final int s;

            /**
             * Computes a path between s and every other vertex in graph G
             * @param G the graph
             * @param s the source vertex
             */
             public DepthFirstPaths(Graph G, int s) {
                 this.s = s;
                 edgeTo = new int[G.V()];
                 marked = new boolean[G.V()];
                 dfs(G, s);
             }

             // Depth first search from v
             private void dfs(Graph G, int v) {
                 // TODO
             }

             /**
              * Is there a path between the source s and vertex v?
              * @param v the vertex
              * @return true if there is a path, false otherwise
              */
             public boolean hasPathTo(int v) {
                 // TODO
             }

             /**
              * Returns a path between the source vertex s and vertex v, or
              * null if no such path
              * @param v the vertex
              * @return the sequence of vertices on a path between the source vertex
              *         s and vertex v, as an Iterable
              */
             public Iterable<Integer> pathTo(int v) {
                 // TODO
             }
        }

    The class ``Graph`` is already implemented. Here is its specification:

    .. code-block:: java

        public class Graph {
            // @return the number of vertices
            public int V() { }

            // @return the number of edges
            public int E() { }

            // Add edge v-w to this graph
            public void addEdge(int v, int w) { }

            // @return the vertices adjacent to v
            public Iterable<Integer> adj(int v) { }

            // @return a string representation
            public String toString() { }
        }

    **Note:** The following questions will ask you to implement the function left out. You don't need to put the brackets (``{ }``) surrounding the function body in your answer.
environment: java8scala
evaluate: best
groups: false
limits:
    output: '2'
    memory: '100'
    time: '30'
name: Pr√©-examen - Depth First Paths
network_grading: false
problems:
    import:
        type: code
        name: ''
        header: |-
            You can use this to import additional classes your code may need.

            **Note:** This is only asked so that your code can be compiled and tested. During the exam, you won't need to provide this and you will be able to use pseudo-classes like ``Queue``.
        language: java
    question1:
        language: java
        type: code
        name: ''
        header: |-
            .. code-block:: java

                private void dfs(Graph G, int v)
    question2:
        header: |-
            .. code-block:: java

                public boolean hasPathTo(int v)
        language: java
        type: code
        name: ''
    question3:
        language: java
        type: code
        name: ''
        header: |-
            .. code-block:: java

                public Iterable<Integer> pathTo(int v)
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
weight: 1.0
order: 41
