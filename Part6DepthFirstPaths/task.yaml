accessible: 2018-12-10 17:00:00/2019-12-10 17:00:00
author: John Aoga
context: |-
    Considérez cette classe, ``DepthFirstPaths``, qui calcule les chemins vers n'importe quel noeud connecté à partir d'un noeud source ``s`` dans un graphe non dirigé en utilisant un parcours DFS.

    .. code-block:: java

        // TODO

        public class DepthFirstPaths {
            private boolean[] marked; // marked[v] = is there an s-v path?
            private int[] edgeTo;     // edgeTo[v] = last edge on s-v path
            private final int s;

            /**
             * Computes a path between s and every other vertex in graph G
             * @param G the graph
             * @param s the source vertex
             */
             public DepthFirstPaths(Graph G, int s) {
                 this.s = s;
                 edgeTo = new int[G.V()];
                 marked = new boolean[G.V()];
                 dfs(G, s);
             }

             // Depth first search from v
             private void dfs(Graph G, int v) {
                 // TODO
             }

             /**
              * Is there a path between the source s and vertex v?
              * @param v the vertex
              * @return true if there is a path, false otherwise
              */
             public boolean hasPathTo(int v) {
                 // TODO
             }

             /**
              * Returns a path between the source vertex s and vertex v, or
              * null if no such path
              * @param v the vertex
              * @return the sequence of vertices on a path between the source vertex
              *         s and vertex v, as an Iterable
              */
             public Iterable<Integer> pathTo(int v) {
                 // TODO
             }
        }

    La classe ``Graph`` est déjà implémentée. En voici la spécification :

    .. code-block:: java

        public class Graph {
            // @return the number of vertices
            public int V() { }

            // @return the number of edges
            public int E() { }

            // Add edge v-w to this graph
            public void addEdge(int v, int w) { }

            // @return the vertices adjacent to v
            public Iterable<Integer> adj(int v) { }

            // @return a string representation
            public String toString() { }
        }

    **Note:** Les questions suivantes vous demanderont d'implémenter tous les ``TODO`` de la classe ``DepthFirstPaths``. Vous n'avez pas besoin de mettre les accolades (``{ }``) entourant le corps de la fonction dans votre réponse.

    `Le projet IntelliJ est disponible ici </course/LSINF1121-2016/Part6DepthFirstPaths/LSINF1121_PART6_DepthFirstPaths.zip>`_.
environment: java8scala
evaluate: best
groups: false
input_random: '0'
limits:
    time: '30'
    output: '2'
    memory: '100'
name: PART 6 - Depth First Paths (implem)
network_grading: false
order: 27
problems:
    import:
        default: ''
        header: |-
            Vous pouvez l'utiliser pour importer des classes supplémentaires dont votre code peut avoir besoin.

            **Note:** Ceci n'est demandé que pour que votre code puisse être compilé et testé. Pendant l'examen, vous n'aurez pas besoin de fournir cette information et vous pourrez utiliser des pseudo-classes comme ``Queue``.
        language: java
        type: code
        name: Les importations
    question1:
        name: Implémentation de la méthode dfs
        language: java
        header: |-
            .. code-block:: java

                private void dfs(Graph G, int v)
        default: ''
        type: code
    question2:
        default: ''
        header: |-
            .. code-block:: java

                public boolean hasPathTo(int v)
        language: java
        name: Implémentation de la méthode hasPathTo
        type: code
    question3:
        header: |-
            .. code-block:: java

                public Iterable<Integer> pathTo(int v)
        default: ''
        name: Implémentation de la méthode distTo
        language: java
        type: code
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
weight: 1.0
