accessible: false
author: ''
context: |-
    Vous devez calculer un arbre de Huffman au départ de la fréquence donnée pour chacune des R lettres (characters).

    Pour rappel, dans un arbre de Huffman nous avons que *la somme de la fréquence associée à chaque feuille multipliée par la profondeur de celle-ci est minimale*.

    Par exemple, étant donné les fréquences suivantes:

    .. image:: bilan_m5_huffman/huffmanin.png
        :width: 500px
        :align: center
        :alt: Input frequencies

    un arbre de Huffman pourrait être:

    .. image:: bilan_m5_huffman/huffmanout.png
        :width: 500px
        :align: center
        :alt: Huffman tree
environment: java8scala
evaluate: best
groups: false
input_random: '0'
limits:
    output: '2'
    memory: '100'
    time: '30'
name: Bilan M5 - Huffman
network_grading: false
order: 33
problems:
    TODO1:
        default: ''
        language: java
        name: ''
        header: |-
            Le but de cette question de faire fonctionner correctement la méthode ``buildTree``.
            Vous pouvez modifier la classe ci-dessous (ajouter des méthodes, définir des inner-classes, etc) comme vous le souhaitez, mais ne changez pas la signature des méthodes existantes et le constructeur.
            Mettez votre implémentation complète de ``Huffman.java`` ci-dessous. Conseil: copiez-collez d'abord tout le code source de la classe ci-dessus (celle-ci devrait compiler mais son contenu n'est pas correct). Si vous avez besoin d'une structure de donnée auxiliaire, celle-ci est certainement disponible dans ``java.util``. Il n'est dès lors pas nécessaire de la réimplémenter.


            .. code-block:: java

                public class Huffman {
                private Huffman() { }

                // Huffman trie node
                public static class Node {
                    public final int ch;
                    public final int freq;
                    public final Node left, right;

                    Node(int ch, int freq, Node left, Node right) {
                        this.ch    = ch;
                        this.freq  = freq;
                        this.left  = left;
                        this.right = right;
                    }

                    // is the node a leaf node?
                    public boolean isLeaf() {
                        assert ((left == null) && (right == null)) || ((left != null) && (right != null));
                        return (left == null) && (right == null);
                    }
                }

                /**
                 * build the Huffman trie given frequencies
                 * corresponding to each character codes from 0 to R-1.
                 * freq[i] is the frequency for the character with code i
                 * freq.length = R.
                 * R is either 256 or 65536, depending on whether the user choose to use unicode or ASCII.
                 */
                public static Node buildTrie(int R, int[] freq) {
                    // TODO
                   return new Node(0,0,null,null);
                }
                }
        type: code
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags: {}
weight: 1.0
