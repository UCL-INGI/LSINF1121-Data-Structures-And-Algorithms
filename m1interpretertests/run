#! /bin/bash

# Reminder : 
# BuggyInterpreter1 : 'add' bugged
# BuggyInterpreter2 : 'dup' makes 2 copies instead of one
# BuggyInterpreter3 : 'pstack' uses "-" instead of " " as a separator
# BuggyInterpreter4 : upon divison by 0, 'div' doesn't throw an ArithmeticException, but an EmptyStackException
# BuggyInterpreter5 : 'exch' actually replaces one of the 2 elements by the other
# BuggyInterpreter6 : 'pop' doesn't pop anything if the stack is at least of size 3
# BuggyInterpreter7 : 'def' doesn't substring the constant, so for example '/pi' stays '/pi' instead of 'pi'

getinput interpreter_tests > student/InterpreterTests.java
cp junit-4.12.jar student/junit-4.12.jar
cp hamcrest-core-1.3.jar student/hamcrest-core-1.3.jar
cd student

tot=8 # number of tests
n=0 # number of tests passed (OK for Interpreter, FAILURES for BuggyInterpreters)
passOk=0
failOk=0
name="Interpreter.java"

for i in $(seq 1 $tot)
do
	
	cp "../$name" ./Interpreter.java
	name="BuggyInterpreter${i}.java"

	javac Interpreter.java

	# Compile the student code and parse it properly
	compilationMessage=$(javac -cp .:junit-4.12.jar InterpreterTests.java 2>&1)
	compilationMessage=$(echo "$compilationMessage" | sed -e 's/^/\t/' | sed -e 's/%/%%%/g')
	compilationMessage=$(printf "Compilation of InterpreterTests.java failed :\n::\n\n $compilationMessage")
	if [ ! -f InterpreterTests.class ]; then
    	feedback --result failed --feedback "$compilationMessage"
    	exit 0
	fi

	output=$(run_student java -cp .:junit-4.12.jar:hamcrest-core-1.3.jar org.junit.runner.JUnitCore InterpreterTests)
	if [ "$output" = "252" ]; then
		feedback --result failed --feedback "Command was killed due to an out-of-memory"
		exit 0
	elif [ "$output" = "253" ]; then
		feedback --result failed --feedback "Command timed out"
		exit 0
	elif [ "$output" = "254" ]; then
	      feedback --result failed --feedback "Unfortunately, a runtime error occured"
		exit 0
	fi

	failed=$(echo "$output" | grep -c "FAILURES")
    passed=$(echo "$output" | grep -c "OK")

	if [ "$i" = "1" ] && [ "$failed" = "0" ] && [ "$passed" != "0" ]; then
		((n++))
		((passOk++))
	fi

	if [ "$i" != "1" ] && [ "$failed" = "1" ] && [ "$passed" = "0" ]; then
		((n++))
		((failOk++))
	fi
done
cd ..

feedback=""
if [ "$passOk" != 1 ]; then
	feedback="you detected an error in a correct interpreter"
fi
if [ "$failOk" != "$(($tot-1))" ]; then
	if [ "$feedback" != "" ]; then
    		feedback="$feedback and "
    	fi
    	lack=$(($tot-1-$failOk))
	feedback="you didn't detect errors in $lack incorrect interpreters. "
fi

if [ "$n" = "$tot" ]; then
	feedback --result success --feedback "Congratulations, you passed the $n tests!"
else
	feedback --result failed --feedback "Unfortunately, you passed only $n tests out of $tot : $feedback"
fi
