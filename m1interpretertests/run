#! /bin/bash

# Reminder : 
# BuggyInterpreter1 : 'add' bugged
# BuggyInterpreter2 : 'dup' makes 2 copies instead of one
# BuggyInterpreter3 : 'pstack' uses "-" instead of " " as a separator
# BuggyInterpreter4 : upon divison by 0, 'div' doesn't throw an ArithmeticException, but an EmptyStackException
# BuggyInterpreter5 : 'exch' actually replaces one of the 2 elements by the other
# BuggyInterpreter6 : 'pop' doesn't pop anything if the stack is at least of size 3
# BuggyInterpreter7 : 'def' doesn't substring the constant, so for example '/pi' stays '/pi' instead of 'pi'

###################################
# Test configuration
###################################

tot=8 # number of tests
problemId="interpreter_tests"
name="Interpreter"
testName="InterpreterTests"
interfaceName="InterpreterInterface"
buggyName="BuggyInterpreter"
buggyFeedbacks=(
	""
	""
	""
	"Unit tests should also cover error case i.e. if an implementation behaves correctly when wrong input has been given"
	""
	""
	""
)

####################################
# Execution of the tests
####################################

getinput "${problemId}" > "student/$testName.java"
cp junit-4.12.jar student/junit-4.12.jar
cp hamcrest-core-1.3.jar student/hamcrest-core-1.3.jar
cp "${name}.java" "student/${name}.java"
cp "${interfaceName}.java" "student/${interfaceName}.java"
cd student

incorrect=$(( $tot-1 ))
n=0 # number of tests passed
passOk=0
failOk=0
oldName="$name"
feedbackMessages=""

# This loop first checks with the correct implementation, and then
# with the ${tot-1} incorrect ones
for i in $(seq 1 $tot)
do
	cp "../${name}.java" "./${oldName}.java"
	name="${buggyName}${i}"
	javac "${oldName}.java"

	# Compile the student code and parse it properly
	compilationMessage=$(javac -cp .:junit-4.12.jar "${testName}.java" 2>&1)
	compilationMessage=$(echo "$compilationMessage" | sed -e 's/^/\t/' | sed -e 's/%/%%%/g')
	compilationMessage=$(printf "Compilation of $testName.java failed :\n::\n\n $compilationMessage")
	if [ ! -f "${testName}.class" ]; then
		feedback --result failed --feedback "$compilationMessage"
		exit 0
	fi

	output=$(run_student java -cp .:junit-4.12.jar:hamcrest-core-1.3.jar org.junit.runner.JUnitCore "$testName")
	retval=$?
	if [ "$retval" = "252" ]; then
		feedback --result failed --feedback "Command was killed due to an out-of-memory"
		exit 0
	elif [ "$retval" = "253" ]; then
		feedback --result timeout --feedback "Command timed out"
		exit 0
	elif [ "$retval" = "254" ]; then
		  feedback --result failed --feedback "Unfortunately, a runtime error occured"
		exit 0
	fi

	failed=$(echo "$output" | grep -c "FAILURES")
	passed=$(echo "$output" | grep -c "OK")

	if [ "$i" = "1" ]; then
		# This is the first test, we're testing against the correct implementation
		if [ "$failed" = "0" ] && [ "$passed" != "0" ]; then
			((n++))
			((passOk++))
		fi

	else
		# We're testing against an incorrect implementation
		if [ "$failed" = "1" ] && [ "$passed" = "0" ]; then
			((n++))
			((failOk++))
		else
			# We add a feedback message for the user
			index=$((i - 1))
			feedbackLine=${buggyFeedbacks[$index-1]}
			if [[ -z "$feedbackLine" ]]; then
				feedbackLine="Failed test"
			fi
			feedbackMessages="${feedbackMessages}Test #$index: $feedbackLine\n\n"
		fi
	fi
done
cd ..

if [ "$n" = "0" ]; then
	feedback --result failed --feedback "It seems like an internal error occured. If this persists, please contact your course administrator. "
elif [ "$passOk" != "1" ]; then
	feedback --result failed --feedback "You detected an error in a correct implementation"
elif [ "$n" = "$tot" ]; then
	feedback --grade 100 --result success --feedback "Congratulations, you passed the ${incorrect} tests!"
else
	errors=$(( incorrect - failOk ))
	grade=$(( (100 * (failOk)) / $incorrect ))

	feedback-grade $grade
	feedback-result failed

	# We only print the test feedbacks if the student has not more
	# than 3 failed tests
	if [ "$errors" -le "3" ]; then
		feedback-msg -ae -m "${feedbackMessages}"
	fi

	feedback-msg -ae -m "You detected errors in only $failOk (out of $incorrect) incorrect implementations."
fi