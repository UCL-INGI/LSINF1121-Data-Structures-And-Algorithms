#! /bin/bash

getinput interpreter_tests > student/InterpreterTests.java
cp junit-4.12.jar student/junit-4.12.jar
cp hamcrest-core-1.3.jar student/hamcrest-core-1.3.jar
cp MyStack.java ./student
cp Element.java ./student
cd student

n=0 # number of tests passed (OK for Interpreter, FAILURES for BuggyInterpreters)
passOk=0
failOK=0
name="Interpreter"

for i in `seq 1 3`;
do
	
	cp "../$name" ./Interpreter.java
	name="BuggyInterpreter$i"

	javac -d ./student MyStack.java Element.java Interpreter.java

	javac -cp .:junit-4.12.jar InterpreterTests.java
	if [ ! -f InterpreterTests.class ]; then
	    feedback --result failed --feedback "Compilation failed"
	    exit 0
	fi

	output=$(java -cp .:junit-4.12.jar:hamcrest-core-1.3.jar org.junit.runner.JUnitCore InterpreterTests)
	if [ "$output" = "252" ]; then
		feedback --result failed --feedback "Command was killed due to an out-of-memory"
		exit 0
	elif [ "$output" = "253" ]; then
		feedback --result failed --feedback "Command timed out"
		exit 0
	elif [ "$output" = "254" ]; then
	      feedback --result failed --feedback "An runtime error occured"
		exit 0
	fi

	failed=$(echo "$output" | grep -c "FAILURES")

	if [ "$i" = "1" ] && [ "$failed" = "0" ]; then
		((n++))
		((passOk++))
	fi

	if [ "$i" != "1" ] && [ "$failed" = "1" ]; then
		((n++))
		((failOk++))
	fi
done
cd ..

feedback=""
if [ "$passOk" != 1 ]; then
	feedback="you detected an error in a correct interpreter"
fi
if [ "$failOk" != 2 ]; then
	if [ "$feedback" != "" ]; then
    	feedback="$feedback and "
    fi
    lack=$((2-$failOk))
	feedback="you didn't detect errors in $lack incorrect interpreters. "
fi

if [ "$n" = 3 ]; then
	feedback --result success --feedback "Congratulations, you passed all the tests!"
else
	feedback --result failed --feedback "Unfortunately, you passed only $n tests out of 3 : $feedback"
fi

