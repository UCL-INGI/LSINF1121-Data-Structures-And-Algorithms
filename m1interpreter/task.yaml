accessible: /2017-09-29 08:00:00
author: Simon Hardy
context: |-
    You are asked to write a mini-PostScript interpreter as described in the *pdf* of the mission. Precisely, you must implement the following interface :

    .. code-block:: java

        public interface InterpreterInterface {
            /**
             * @pre: 'instructions' is a valid chain of PostScript instructions
             * @post: returns a String representing the state of the stack when a 'pstack' instruction is encountered.
             *    If several 'pstack' instructions are present in the chain, a concatenation of the corresponding states (when 'pstack' is encountered) must be returned, separated by whitespaces.
             *    If several elements are still on the stack, separate them with whitespaces.
             *    If there is no element on the stack or no 'pstack' instruction, return the empty string ("").
             */
            public String interpret(String instructions);
        }

    Don't forget to throw the different possible exceptions : think about java.util.EmptyStackException, java.lang.ArithmeticException...

    Note that [group] means that only one student must submit the code for the entire group.
environment: java8scala
evaluate: best
groups: false
limits:
    memory: '512'
    output: '100'
    time: '70'
name: Mission 1 - PostScript Interpreter [group]
network_grading: false
order: 7
problems:
    interpreter:
        name: PostScript interpreter
        allowed_exts:
        - .java
        header: 'Upload your interpreter here. Your file should contain exactly one
            public class named *Interpreter* and implementing *InterpreterInterface*.
            Put additional classes inside *Interpreter*, or just after it in the same
            file but then without the *public* key-word. '
        type: code-file
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
weight: 1.0
