#! /bin/bash
getinput interpreter > student/Interpreter.java
cp InterpreterInterface.java student/InterpreterInterface.java

# Compile the student code and parse it properly
compilationMessage=$(javac student/InterpreterInterface.java student/Interpreter.java 2>&1)
compilationMessage=$(echo "$compilationMessage" | sed -e 's/^/\t/' | sed -e 's/%/%%%/g')
compilationMessage=$(printf "Compilation of Interpreter.java failed :\n::\n\n $compilationMessage")
if [ ! -f student/Interpreter.class ]; then
    feedback --result failed --feedback "$compilationMessage"
    exit 0
fi

# Copy everything in the 'student' directory for run_student
cp InterpreterProps.scala student/InterpreterProps.scala
cp GeneratorPostScript.java student/GeneratorPostScript.java
cp MyInterpreter.java student/MyInterpreter.java
cp scalacheck.jar student/scalacheck.jar
cd student
javac GeneratorPostScript.java MyInterpreter.java
scalac -cp .:scalacheck.jar InterpreterProps.scala
output=$(run_student scala -cp .:scalacheck.jar InterpreterProps)
cd ..

if [ "$output" = "252" ]; then
	feedback --result failed --feedback "Command was killed due to an out-of-memory"
elif [ "$output" = "253" ]; then
	feedback --result failed --feedback "Command timed out"
elif [ "$output" = "254" ]; then
      feedback --result failed --feedback "Unfortunately, a runtime error occured"
else
    failed=$(echo "$output" | grep -c "Falsified")
	passed=$(echo "$output" | grep -c "OK")
    infos=$(echo "$output" | grep -o '! \w*.\w*')

	if [ "$failed" = "0" ] && [ "$passed" = "0" ]; then
    	feedback --result failed --feedback "It seems like an internal error occured. If this persists, please contact your course administrator. "
	elif [ "$failed" = "0" ]; then
		feedback --result success --feedback "Congratulations, you passed the $passed tests!"
	else
		feedback --result failed --feedback "Unfortunately, you failed $failed tests out of $(($passed+$failed)) : $infos"
	fi
fi