accessible: false
author: Simon Hardy, Frédéric Kaczynski
context: |-
    For this task, you have to write unit tests using JUnit in order to check several Kruskal implementations. You are given one class, *Kruskal*, and you have to determine if it does its job correctly or not. We provide you an optional template to begin writing your tests:

    .. code-block:: java

        import org.junit.Test;
        import static org.junit.Assert.assertEquals;
        import static org.junit.Assert.assertTrue;
        import static org.junit.Assert.fail;
        import java.io.File;
        import java.io.FileNotFoundException;
        import java.util.Scanner;
        import java.util.NoSuchElementException;
        import java.util.Set;
        import java.util.HashSet;

        public class KruskalTests {

            @Test
            public void firstTest() {
                try {
                    String in = "TODO";
                    String out = "TODO";
                    int numberOfNodes = 0; // TODO number of nodes of this instance
                    int optimalCost = 0; // TODO optimal cost for this instance
                    applyTest(in, out, numberOfNodes, optimalCost);
                } catch (Exception e) {
                    fail("Exception occured : " + e);
                }
            }

            @Test
            public void secondTest() {
                // TODO...
            }

            public static void applyTest(String in, String out, int numberOfNodes, int optimalCost) {
                Kruskal.main(new String[] {in, out}); // apply the algorithm under test

                int[] result = readSol(out, numberOfNodes); // get the solution in 'result'

                assertEquals(result[0], numberOfNodes); // all the nodes are involved (it's 'spanning')
                assertEquals(result[1], numberOfNodes-1); // number of edges = number of nodes - 1 (it's a 'tree')
                assertTrue(result[2] <= optimalCost); // the cost is optimal (it's a 'minimum' spanning tree)

                // TODO Assert that the graph is connected using Union/Find structures...
            }

            public static int[] readSol(String path, int numberOfNodes) {
                Set<Integer> nodes = new HashSet<Integer>();
                int numberOfEdges = 0;
                int totalCost = 0; // cost found by the student
                int cheat = 0; // incremented if fake edge
                try {
                    File f = new File (path);
                    Scanner s = new Scanner(f);

                    try {
                        while (s.hasNextInt())
                        {
                            int v1 = s.nextInt();
                            int v2 = s.nextInt();
                            int cost = s.nextInt();
                            numberOfEdges += 1;
                            totalCost += cost;
                            nodes.add(v1);
                            nodes.add(v2);
                        }

                        s.close();
                    } catch (NoSuchElementException e)
                    {
                        fail("Error occured while reading the file  : " + e.getMessage());
                    }
                } catch (FileNotFoundException exception) {
                    fail("File not found");
                }
                return new int[] {nodes.size(), numberOfEdges, totalCost, cheat};
            }
        }

    Note that you can either provide the input text files in an archive, or directly write them in your tests. You can even do both at the same time, but in all cases you have to submit an archive (which can be empty if you don't need it).

    Hint : you should strictly respect the input format in your test files, i.e. one edge per line, *tabulations* as separators...
environment: java8scala
evaluate: best
groups: false
limits:
    hard_time: '420'
    output: '100'
    time: '120'
    memory: '512'
name: Mission 6 - Unit tests for Kruskal [individual]
network_grading: false
order: 36
problems:
    tests:
        type: code-file
        allowed_exts:
        - .java
        name: Unit tests for Kruskal
        header: 'Upload your file here, with only one class named *KruskalTests*.
            The class representing the implementation under test is called *Kruskal*,
            as written in the template. '
    archive:
        allowed_exts:
        - .zip
        type: code-file
        header: 'Upload the archive containing your .txt files here. It will be unzipped
            in the same directory as your *KruskalTests* class. Don''t forget that
            if you zip a directory (instead of your .txt files directly), then you
            will have to write "dir/file.txt" in your tests instead of just "file.txt". '
        name: Archive with inputs as text files
        max_size: 5000000
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
weight: 1.0
