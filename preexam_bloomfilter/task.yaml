accessible: false
author: Xavier Gillard, Pierre Schaus
context: |
    Les filtres de Bloom
    --------------------
    Un filtre de Bloom, est une structure de donnée très compacte et efficace qui permet d'implémenter un test d'appartenance rapide (:code:`.contains()`) à un très grand *ensemble*. Cependant, contrairement au test d'appartenance à un ensemble tel qu'implémenté à l'aide d'une HashMap, le test d'appartenance implémenté via un filtre de bloom peut renvoyer un résultat erroné (faux positifs possibles mais pas de faux négatifs) dans certains cas et cela, avec une faible probabilité.

    L'efficacité de cette structure, et le fait qu'elle ne requière qu'une quantité très faible (et constante !) de mémoire quel que soit le nombre d'éléments contenus dans l'ensemble en ont fait une structure de choix pour un très grand nombre d'applications. A titre d'exemple, on mentionnera le fait que les filtres de Bloom sont utilisés par certains devices réseaux pour faire du *Deep Packet Inspection*, ou encore que les bases de données *Google Big Table*, *Apache Cassandra* ou encore *Postgresql* utilisent cette structure de donnée afin de tester si une donnée se trouve en cache ou non.

    En effet la recherche de la donnée étant généralement coûteuse,
    un filtre de Bloom est utilisé pour éviter de faire une recherche
    si la donnée n'est pas présente. Par contre comme les erreurs de type faux-positifs sont possibles, le filtre de Bloom peut dire que la donnée s'y trouve alors que ça n'est pas vrai. Dans ce cas, il faudra effectuer la recherche pour vérifier et payer le coût de celle recherche (par exemple une recherche linéaire avec des accès
    sur le disque).

    Concrètement
    ------------
    Concrètement, un filtre de bloom consiste en un vecteur :math:`V = v_1..v_n` de bit et d'un ensemble :math:`F = f_1..f_k` de fonctions de hachage

    Pour ajouter un élément :math:`X` dans le set, on applique successivement chacune des fonctions :math:`f_i \in F` de hachage. L'application de chacune de ses fonctions à l'élément :math:`X` renvoie un nombre :math:`h_i \in \left[0..n-1\right]`. Pour marquer l'ajout de :math:`X` au filtre de bloom, on sette simplement chacun des :math:`v_{h_i}` bits dans :math:`V`.

    De façon similaire, pour tester l'appartenance d'un élément :math:`X` au set, on vérifie que le :math:`h_i` ème bit :math:`\in V` correspondant à :math:`f_i(X)` est setté à `on`. Le test d'appartenance ne renverra `true` que ssi, cette condition est vérifiée pour chacune des :math:`f_i \in F`.

    Exemples
    ~~~~~~~~
    En supposant qu'on ait un filtre de Bloom représenté par 1 byte et 3 fonctions de hachage telles que:

    .. code::

        f1("Salut") = 0
        f2("Salut") = 1
        f3("Salut") = 2

        et

        f1("1121") = 0
        f2("1121") = 1
        f3("1121") = 4

    L'ajout de "Salut" au filtre 00000000 transforme celui-ci en 11100000. Si par la suite on veut tester que "Salut" est bien présent dans le filtre, on s'assure que les bits v1, v2 et v3 sont bien == 1.

    En continuant sur le même exemple, on voit que la chaine "1121" n'est pas présente dans la structure puisque le 4eme bit est 'off'.
environment: mcq
evaluate: best
groups: false
limits:
    time: '30'
    memory: '100'
    output: '2'
name: Pré-examen - Bloom Filters
network_grading: false
order: 27
problems:
    bloom_vs_hashmap:
        multiple: true
        name: Bloom Filter vs HashSet
        choices:
        -   text: Le nombre de clés possibles est connu à l'avance
        -   valid: true
            text: Il y a un trop grand nombre de clés possibles que pour pouvoir les
                garder toutes en mémoire
        -   text: Il n'y a aucune raison de préférer une structure en particulier
                plutôt qu'une autre
        header: 'Pour implémenter un test d''appartenance, il est préférable d''utiliser
            un Bloom filter plutôt qu''un HashSet lorsque: '
        limit: 0
        type: multiple-choice
    limitation:
        type: multiple-choice
        choices:
        -   text: Son blocking factor. En effet, plus il y a d'éléments dans le filtre,
                plus il est difficile d'en ajouter de nouveaux.
        -   valid: true
            text: Son load factor. En effet, plus il y a d'éléments dans le filtre
                plus il y a de chance que le test d'appartenance renvoie un faux positif.
        limit: 0
        name: Qu'est-ce qui limite l'utilité de cette structure
        header: ''
    complexite_temp_ajout:
        choices:
        -   text: :math:`O(1)`
        -   text: :math:`\Omega(1)`
        -   text: :math:`\Theta(1)`
        -   text: :math:`O(n)`
        -   text: :math:`\Omega(n)`
        -   text: :math:`\Theta(n)`
        -   text: :math:`O(k)`
        -   text: :math:`\Omega(k)`
        -   text: :math:`\Theta(k)`
            valid: true
        -   text: On ne peut pas ajouter un élément à un filtre de Bloom.
        header: Quelle est la complexité temporelle d'un ajout d'un élément dans le
            filtre de Bloom ? (On fait ici l'hypothèse que chacune des fonctions de
            hachage est calculée en temps constant)
        limit: 0
        type: multiple-choice
        name: 'Complexité temporelle d''un ajout au filtre '
    complexite_temp_suppression:
        choices:
        -   text: :math:`O(1)`
        -   text: :math:`\Omega(1)`
        -   text: :math:`\Theta(1)`
        -   text: :math:`O(n)`
        -   text: :math:`\Omega(n)`
        -   text: :math:`\Theta(n)`
        -   text: :math:`O(k)`
        -   text: :math:`\Omega(k)`
        -   text: :math:`\Theta(k)`
        -   valid: true
            text: On ne peut pas supprimer un élément d'un filtre de Bloom.
        name: Complexité temporelle de la suppression d'un élément
        header: Quelle est la complexité temporelle de la suppression d'un élément
            dans le filtre de Bloom ? (On fait ici l'hypothèse que chacune des fonctions
            de hachage est calculée en temps constant)
        limit: 0
        type: multiple-choice
    recovery:
        choices:
        -   text: Linear Probing
        -   text: Separate Chaining
        -   text: Redimensioner le bit vector
        -   text: Aucune
            valid: true
        name: En cas de collision, quelle(s) stratégie(s) peut-on implémenter pour
            résoudre le conflit ?
        type: multiple-choice
        limit: 0
        header: ''
        multiple: true
    hashtable_est_k1:
        choices:
        -   valid: true
            text: Vrai
        -   text: Faux
        type: multiple-choice
        name: HashSet - CollisionResolutionStrategy == BloomFilter with k = 1 ?
        limit: 0
        header: On peut toujours remplacer une implémentation d'un hash set qui n'incorpore
            aucune stratégie de résolution de collision (*pas de separate-chaining
            ni de linear probing*) par un bloom filter avec k = 1 ?
    pourquoi_k_pg_1:
        limit: 0
        choices:
        -   text: Il n'y en a pas
        -   text: Les fonctions :math:`f_2 \cdots f_k` servent à corriger de potentielles
                erreurs de calcul dans :math:`f_1`
        -   valid: true
            text: Cela permet de réduire le risque de faux-positifs malgré les collisions
                qui peuvent se produire pour chacune des fonctions de hash.
        header: ''
        name: Quel est l'intérêt d'utiliser k >= 1 plutôt que k = 1 ?
        type: multiple-choice
    propositions:
        choices:
        -   text: Une HashMap stocke la valeur associée à chacune des clés.
            valid: true
        -   text: Un filtre de Bloom stocke la valeur associée à chacune des clés
        -   valid: true
            text: Malgré le risque de collision pour chacune des k fonctions de hachage,
                un filtre de Bloom permet de partager certains bits entre les clés
                associés à différents items car la probabilité de collision est réduite.
        -   text: Grâce au separate chaining, une HashMap peut partager certains bits
                entre différentes clés sans impacter la complexité d'un test d'appartenance.
        limit: 0
        header: ''
        type: multiple-choice
        name: 'Sélectionne les propositions qui sont vraies:'
        multiple: true
    union_faux_positifs:
        type: multiple-choice
        choices:
        -   valid: true
            text: :math:`k \in c` est vrai pour tous les :math:`k \in a`
        -   valid: true
            text: :math:`k \in c` est vrai pour tous les :math:`k \in b`
        -   text: Il peut exister un :math:`k \not\in a \wedge k \not\in b` pour lequel
                le test :math:`k \in c` renvoie `true`
            valid: true
        -   text: 'Il est possible que `c` ne contienne pas l''information associée
                à toutes les clés de `a` (:math:`\exists k \in a : k \not\in c`)'
        -   text: 'Il est possible que `c` ne contienne pas l''information associée
                à toutes les clés de `b` (:math:`\exists k \in b : k \not\in c`)'
        -   text: Le filtre `c` contient exactement les mêmes clés que :math:`a \cup
                b` (il n'y a pas de nouveaux faux-positifs)
        multiple: true
        limit: 0
        header: |
            Soient `a` et `b` deux vecteurs de bits utilisés pour représenter deux filtres de Bloom utilisant un même ensemble F de fonctions de hachage. Si `c` est le vecteur de bit représentant un filtre de Bloom obtenu par `c = a | b`.

            .. note::

              Dans les propositions suivantes, on utilisera le nom du bit
              vector pour désigner le filtre de Bloom auquel il se rapporte.
        name: Sélectionnez la/les proposition(s) correcte(s)
    complexite_spatiale:
        choices:
        -   text: :math:`BloomFilter \le HashSet \le SinglyLinked \le RedBlack`
            valid: true
        -   text: :math:`BloomFilter \le HashSet \le RedBlack \le SinglyLinked`
        -   text: :math:`HashSet \le BloomFilter \le SinglyLinked \le RedBlack`
        -   text: :math:`BloomFilter \le SinglyLinked \le HashSet \le RedBlack`
        -   text: :math:`BloomFilter \le RedBlack \le SinglyLinked \le HashSet`
        name: Complexité Spatiale
        limit: 0
        header: |-
            Pour représenter un ensemble comprenant 3000 éléments, on dispose d'un certain nombre d'options. Parmi celles-ci on compte les Singly-Linked List, BloomFilter (avec n = 3000), Red-Black Tree, HashSet.

            Trie chacune des ces représentations possibles par ordre croissant de mémoire utilisée.
        type: multiple-choice
    twitter_exact:
        choices:
        -   text: ~ 39 MB
        -   text: ~ 10  MB
        -   text: ~ 1.2 GB
            valid: true
        -   text: 2   GB
        header: |+
            Si on souhaite compter le nombre de personnes ayant tweeté un jour donné, on peut utiliser un code semblable à celui donné ci-dessous. Sachant que le réseau social Twitter compte 328 millions d'utilisateurs actifs, choisis parmi les solutions données, la quantité minimiale de mémoire qui est nécessaire pour compter le
            nombre d'utilisateurs uniques ayant tweeté un jour donné (si on utilise le code donné). On fait ici l'hypothèse que la clé utilisée pour identifier chaque utilisateur est un entier (int).

            .. code::
                 java

                // Ce compteur est incrémenté chaque fois qu'on détecte qu'une nouvelle
                // personne a tweeté.
                long compteur = 0L;

                // Cet ensemble stocke l'identifiant de chacun des utilisateurs ayant
                // déjà tweeté aujourd'hui.
                HashSet aTweete = new HashSet();

                // ... snip ...

                // Ce fragment de code est exécuté à chaque fois qu'un tweet est émis par
                // un utilisateur. (On ne se soucie pas ici des race-conditions possibles)
                if ( !aTweete.contains( tweet.userId() ) ) {
                    aTweete.add(tweet.userId());
                    compteur += 1;
                }

        type: multiple-choice
        name: Comptage exact
        limit: 0
    twitter_approx:
        choices:
        -   text: ~ 1.2 GB
        -   text: ~ 10  MB
        -   text: ~ 39  MB
            valid: true
        -   text: ~ 2   GB
        name: Comptage approximatif
        limit: 0
        header: |+
            Si on souhaite compter de façon approximative le nombre de personnes ayant tweeté un jour donné, on peut utiliser un code semblable à celui donné ci-dessous. Sachant que le réseau social Twitter compte 328 millions d'utilisateurs actifs, choisis parmi les solutions données, la quantité minimiale de mémoire qui est nécessaire pour compter le nombre d'utilisateurs uniques ayant tweeté un jour donné (si on utilise le code donné). On fait ici l'hypothèse que la clé utilisée pour identifier chaque utilisateur est un entier (int).

            .. code::
                java

                // Ce compteur est incrémenté chaque fois qu'on détecte qu'une nouvelle
                // personne a tweeté.
                long compteur = 0L;

                // Cet ensemble stocke l'identifiant de chacun des utilisateurs ayant
                // déjà tweeté aujourd'hui.
                // Note: le 'n' de ce bloom filter est de 328 millions
                BloomFilter aTweete = new BloomFilter();

                // ... snip ...

                // Ce fragment de code est exécuté à chaque fois qu'un tweet est émis par
                // un utilisateur. (On ne se soucie pas ici des race-conditions possibles)
                if ( !aTweete.contains( tweet.userId() ) ) {
                    aTweete.add(tweet.userId());
                    compteur += 1;
                }

        type: multiple-choice
    implem_utile:
        choices:
        -   text: Solution A
        -   text: Solution B
        -   text: Solution C
            valid: true
        -   text: Solution D
        header: |+
            Parmi les propositions suivantes, la- ou lesquelles vous semblent être des implémentations utiles ?

            Solution A
            ~~~~~~~~~~
            .. code::
                java

                public class BloomFilter {
                    int bitmask;

                    int f1(Object o) { return o.hashCode() * 41 % 2; }
                    int f2(Object o) { return o.hashCode() * 31 % 3; }

                    // snip ...
                }

            Solution B
            ~~~~~~~~~~
            .. code::
                java

                public class BloomFilter {
                    int bitmask;

                    int f1(Object o) { return o.hashCode() * 41 % 97; }
                    int f2(Object o) { return o.hashCode() * 31 % 97; }

                    // snip ...
                }

            Solution C
            ~~~~~~~~~~
            .. code::
                java

                public class BloomFilter {
                    int bitmask;

                    int f1(Object o) { return o.hashCode() * 41 % 31; }
                    int f2(Object o) { return o.hashCode() * 31 % 31; }

                    // snip ...
                }

            Solution D
            ~~~~~~~~~~
            .. code::
                java

                public class BloomFilter {
                    int bitmask;

                    int f1(Object o) { return o.hashCode() * 41 % 32; }
                    int f2(Object o) { return o.hashCode() * 31 % 32; }

                    // snip ...
                }


        type: multiple-choice
        limit: 0
        multiple: true
        name: Implémentation(s) utile(s)
stored_submissions: 0
submission_limit:
    amount: 1
    period: -1
weight: 1.0
