#!/bin/bash

# This is the script executed for each missions where students submit tests.
# Arguments:
# 1 - Count of tests to pass (taking in account the "correct" implementation)
# 2 - Id of the problem
# 3 - Name of the class that contains the JUnit tests, submitted by the student
# 4 - Name of the interface implemented by the $5 class
# 5 - Name of the implementation that the tests run against
# 6 - Prefix of the buggy implementations (="MyBuggyStack" for "MyBuggyStack1.java", ...)
# 7 - Name of an array that contains feedbacks messages for each buggy implementations
# 8 - Count of errors before we show feedbacks to user

function execute_test {
	local tot="$1"
	local problemId="$2"
	local testName="$3"
	local interfaceName="$4"
	local name="$5"
	local buggyName="$6"
	local -n buggyFeedbacks=$7
	local countBeforeHints=$8

	getinput "${problemId}" > "student/$testName.java"
	cp junit-4.12.jar student/junit-4.12.jar
	cp hamcrest-core-1.3.jar student/hamcrest-core-1.3.jar
	cp "${name}.java" "student/${name}.java"
	if [ -n "${interfaceName}" ]; then
		cp "${interfaceName}.java" "student/${interfaceName}.java"
	fi
	cd student

	incorrect=$(( $tot-1 ))
	n=0 # number of tests passed
	passOk=0
	failOk=0
	oldName="$name"
	feedbackMessages=""

	# This loop first checks with the correct implementation, and then
	# with the ${tot-1} incorrect ones
	for i in $(seq 1 $tot)
	do
		cp "../${name}.java" "./${oldName}.java"
		name="${buggyName}${i}"
		javac "${oldName}.java"

		# Compile the student code and parse it properly
		compilationMessage=$(javac -cp .:junit-4.12.jar "${testName}.java" 2>&1)
		r=$?
		compilationMessage=$(echo "$compilationMessage" | sed -e 's/^/\t/' | sed -e 's/%/%%%/g')
		compilationMessage=$(printf "Compilation of $testName.java failed :\n::\n\n $compilationMessage")
		if [ "$r" = "1" ]; then
			feedback --result failed --feedback "$compilationMessage"
			exit 0
		fi

		output=$(run_student java -cp .:junit-4.12.jar:hamcrest-core-1.3.jar org.junit.runner.JUnitCore "$testName")
		retval=$?
		echo -e "${output}\n"
		echo -e "Return value of JUnit: ${retval}\n"
		if [ "$retval" = "252" ]; then
			feedback --result failed --feedback "Command was killed due to an out-of-memory"
			exit 0
		elif [ "$retval" = "253" ]; then
			feedback --result timeout --feedback "Command timed out"
			exit 0
		elif [ "$retval" = "254" ]; then
			  feedback --result failed --feedback "Unfortunately, a runtime error occured"
			exit 0
		fi

		if [ "$i" = "1" ]; then
			# This is the first test, we're testing against the correct implementation
			# Therefore, the test should say this is a correct implementation
			if [ "$retval" = "0" ]; then
				((n++))
				((passOk++))
			else
				feedback-result failed
				feedback-msg -ae -m "You detected an error in a correct implementation\n\n"
				feedback-msg -ae -m "${output}"
			fi
		else
			# We're testing against an incorrect implementation
			if [ "$retval" != "0" ]; then
				((n++))
				((failOk++))
			else
				# We add a feedback message for the user
				index=$((i - 1))
				feedbackLine=${buggyFeedbacks[$index-1]}
				if [[ -z "$feedbackLine" ]]; then
					feedbackLine="Failed test"
				fi
				feedbackMessages="${feedbackMessages}**Test #$index:** $feedbackLine\n\n"
			fi
		fi
	done
	cd ..

	if [ "$n" = "0" ]; then
		feedback --result failed --feedback "It seems like an internal error occured. If this persists, please contact your course administrator. "
	elif [ "$passOk" != "1" ]; then
		feedback --result failed --feedback "You detected an error in a correct implementation"
	elif [ "$n" = "$tot" ]; then
		feedback --grade 100 --result success --feedback "Congratulations, you passed the **${incorrect}** tests!"
	else
		errors=$(( incorrect - failOk ))
		grade=$(( (100 * (failOk)) / $incorrect ))

		feedback-grade $grade
		feedback-result failed

		# We only print the test feedbacks if the student has not more
		# than 3 failed tests
		if [ "$errors" -le "${countBeforeHints}" ]; then
			feedback-msg -ae -m "${feedbackMessages}"
		fi

		feedback-msg -ae -m "You detected errors in only **$failOk** (out of **$incorrect**) incorrect implementations."
	fi
}
