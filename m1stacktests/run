#! /bin/bash

tot=10 # number of tests
name="MyStack"
testName="StackTests"
word="stack"
buggyName="MyBuggyStack"

getinput stack_tests > "student/$testName.java"
cp junit-4.12.jar student/junit-4.12.jar
cp hamcrest-core-1.3.jar student/hamcrest-core-1.3.jar
cp MyStack.java student/MyStack.java
cp Stack.java student/Stack.java
cd student

n=0 # number of tests passed
passOk=0
failOk=0
oldName="$name"

for i in $(seq 1 $tot)
do
	
	cp "../${name}.java" "./${oldName}.java"
	name="${buggyName}${i}"
	javac "${oldName}.java"

	# Compile the student code and parse it properly
	compilationMessage=$(javac -cp .:junit-4.12.jar "${testName}.java" 2>&1)
	compilationMessage=$(echo "$compilationMessage" | sed -e 's/^/\t/' | sed -e 's/%/%%%/g')
	compilationMessage=$(printf "Compilation of $testName.java failed :\n::\n\n $compilationMessage")
	if [ ! -f "$testName.class" ]; then
    	feedback --result failed --feedback "$compilationMessage"
    	exit 0
	fi

	output=$(run_student java -cp .:junit-4.12.jar:hamcrest-core-1.3.jar org.junit.runner.JUnitCore "$testName")
    retval=$?
	if [ "$retval" = "252" ]; then
		feedback --result failed --feedback "Command was killed due to an out-of-memory"
		exit 0
	elif [ "$retval" = "253" ]; then
		feedback --result timeout --feedback "Command timed out"
		exit 0
	elif [ "$retval" = "254" ]; then
	      feedback --result failed --feedback "Unfortunately, a runtime error occured"
		exit 0
	fi

	failed=$(echo "$output" | grep -c "FAILURES")
    passed=$(echo "$output" | grep -c "OK")

	if [ "$i" = "1" ] && [ "$failed" = "0" ] && [ "$passed" != "0" ]; then
		((n++))
		((passOk++))
	fi

	if [ "$i" != "1" ] && [ "$failed" = "1" ] && [ "$passed" = "0" ]; then
		((n++))
		((failOk++))
	fi
done
cd ..

if [ "$n" = "0" ]; then
	feedback --result failed --feedback "It seems like an internal error occured. If this persists, please contact your course administrator. "
elif [ "$passOk" != "1" ]; then
	feedback --result failed --feedback "you detected an error in a correct $word implementation"
elif [ "$n" = "$tot" ]; then
	feedback --result success --feedback "Congratulations, you passed the $n tests!"
else
    incorrect=$(($tot-1))
	lack=$(($incorrect-$failOk))
	feedback --result failed --feedback "Unfortunately, you didn't detect errors in $lack (out of $incorrect) incorrect ${word} implementations. "
fi