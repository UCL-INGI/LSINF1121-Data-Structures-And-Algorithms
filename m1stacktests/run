#!/usr/bin/env python

from subprocess import Popen, PIPE, STDOUT
from shutil import copyfile
from os import makedirs
from ingiapi import feedback_and_exit, feedback_grade, OVERFLOW, SUCCESS, FAILED, TIMEOUT, CRASH, save_input


def compile_and_run():
    # We compile the stack implement
    result = Popen(["javac", nameTestedStack + ".java"], stdout=PIPE, stderr=STDOUT)
    result.wait()

    if result.returncode != 0:
        feedback_and_exit(problemId, result.stdout.read(), CRASH)
    
    # We compile and run the tests
    result = Popen(
        [
            "run_student",
            "java",
            "-cp",
            ".:junit-4.12.jar:hamcrest-core-1.3.jar",
            "org.junit.runner.JUnitCore",
            nameTests + ".java"
        ],
        stdout=PIPE,
        stderr=STDOUT
    )
    result.wait()

    if result.returncode == 252:
        feedback_and_exit(
            problemId,
            "Execution was killed because of an out-of-memory error",
            OVERFLOW
        )
    elif result.returncode == 253:
        feedback_and_exit(
            problemId,
            "Execution timed out",
            TIMEOUT
        )
    elif result.returncode == 254:
        feedback_and_exit(
            problemId,
            "Execution was killed because of a runtime error",
            CRASH
        )

    junit_result = result.stdout.read()

    passed = "OK" in junit_result
    return passed

countBuggyTests = 10
problemId = "stack_tests"
nameCorrectStack = "MyStack"
nameTestedStack = "MyStack"
nameWrongStack = "MyBuggyStack"
nameTests = "StackTests"

# We retrieve the tests of the user
save_input(problemId, "student/" + nameTestedStack + ".java")

copyfile("junit-4.12.jar", "student/junit-4.12.jar")
copyfile("hamcrest-core-1.3.jar", "student/hamcrest-core-1.3.jar")
copyfile("Stack.java", "student/Stack.java")

# We begin by the correct implementation
copyfile(nameCorrectStack + ".java", "student/" + nameTestedStack + ".java")
result = compile_and_run()

if not result:
    # The correct implementation failed
    feedback_grade(0)
    feedback_and_exit(problemId, "You detected an error in a correct implement", FAILED)
else:
    feedback_grade(100)
    feedback_and_exit(problemId, "You passed the test", SUCCESS)

# We test the wrong implementations
countOk = 0
countFail = 0


result = Popen(["true", "-la"], stdout=PIPE)
result.wait()

print(result.returncode)
