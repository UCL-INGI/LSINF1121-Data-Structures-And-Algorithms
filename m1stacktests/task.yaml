accessible: false
author: Simon Hardy, Frédéric Kaczynski
context: |+
    Rappelez-vous de l'interface Stack :

    .. code-block:: java

        import java.util.EmptyStackException;

        public interface Stack<E> {

            public boolean empty();

            public E peek() throws EmptyStackException;

            public E pop() throws EmptyStackException;

            public E push(E item);

        }

    Il vous est demandé d'écrire des tests unitaire (en utilisant JUnit) afin de vérifier si une implémentation particulière de cette interface est correcte.

    Voici un modèle simple que vous pouvez utiliser pour écrire vos tests (vous pouvez utiliser d'autres types que des String, bien sûr !) :

    .. code-block:: java

        import org.junit.Test;
        import static org.junit.Assert.assertEquals;

        public class StackTests {

            @Test
            public void firstTest() {
                Stack<Integer> stack = new MyStack<Integer>();
                stack.push(1);
                assertEquals(new Integer(1), stack.pop());
            }

            @Test
            public void secondTest() {
                // ... TODO ...
            }

        }


    `Le projet IntelliJ est disponible ici </course/LSINF1121-2016/m1stacktests/LSINF1121_PART1_Stack.zip>`_.

environment: java8scala
evaluate: best
groups: false
input_random: '0'
limits:
    time: '60'
    memory: '512'
    output: '100'
name: PART 1 - Write Unit tests Stack (Implem)
network_grading: false
order: 1
problems:
    stack_tests:
        type: file
        allowed_exts:
        - .java
        header: |-
            Upload your file here, with only one class named *StackTests*. You can suppose that the class representing the stack under test is called *MyStack*, and that the interface is available (named *Stack*) as written in the template.

            **Note:** You should **not** put your class in a java package. In other words, you should **not** use the ``package`` keyword.
        name: Unit tests for the stack implementation
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
tags: {}
weight: 1.0
