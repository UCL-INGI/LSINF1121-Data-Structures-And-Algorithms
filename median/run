#! /bin/bash
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export LANGUAGE=en_US.UTF-8

NO_TESTS=6

#produce the output directory
mkdir output

# parse templates
parsetemplate Median.java

# run sur un seul exemple pour les erreurs de compilation etc

javac -cp junit-4.12.jar:. Test.java 2> output/comp.err 

 java -cp .:junit-4.12.jar:hamcrest-core-1.3.jar org.junit.runner.JUnitCore Test 2> output/run.err > output/junit.out


# add files to archive
archive -a Median.java
for f in $(ls output); do
archive -a output/$f
done

# run feedback
if [ -s output/comp.err ]; then # compilation error
	feedback-result failed
	feedback-msg -ae -m "Il y a eu une erreur de compilation : \n"
	cat output/comp.err | rst-code | feedback-msg -a
	exit
fi

if [ -s output/run.err ]; then # error in main()
	feedback-result failed
	feedback-msg -ae -m "Il y a eu une erreur lors de l'ex√©cution : \n"
	cat output/run.err | rst-code | feedback-msg -a
	exit
fi


if [[ `grep 'java.util' Median.java` ]];then
	feedback-grade 0
	feedback-result failed
	feedback-msg -ae -m "interdit d'utiliser java.util \n"
    exit
fi

if [[ `grep 'new' Median.java` ]];then
	feedback-grade 0
	feedback-result failed
	feedback-msg -ae -m "interdit d'appeler new \n"
    exit
fi

if [[ `grep 'OK (3 tests)' output/junit.out` ]];then
   feedback-grade 100.0
   feedback-result success
   feedback-msg -ae -m "congratulation"
else
   if [[ `grep 'testMedianOk' output/junit.out` ]];then
      feedback-result failed
      feedback-grade 0.0
      feedback-msg -ae -m "mauvaise mediane"
   else
      if [[ `grep 'testComplexityNLogNOk' output/junit.out` ]];then
         feedback-result failed
         feedback-grade 30.0
         feedback-msg -ae -m "bonne mediane, mauvaise complexite"
      else
         if [[ `grep 'testComplexityNOk' output/junit.out` ]];then
            feedback-result failed
            feedback-grade 50.0
            feedback-msg -ae -m "bonne mediane, complexite pas encore O(n)"
         fi
      fi 
   fi
fi


