accessible: /2015-10-30 18:03:14
author: Simon Hardy
context: |-
    You are asked to implement the following interface, representing a custom Ordered Map (for more informations about the methods without comment listed below, refer to the official SortedMap interface of Java).

    You have to implement this interface with a binary search tree (class named "SearchTree"), with the *height-balance property* (in order to achieve the *logarithmic* complexity for 'get').

    Note : you can't rely on any existing Java class implementing java.util.SortedMap

    .. code-block:: java

        import java.util.Collection;
        import java.util.LinkedList;
        import java.util.List;
        import java.util.Set;
        import java.util.Map;

        /* An "OrderedMap" is a class which stores entries with keys of type String and values of type Set<String>.
         * In our case, the key is the name of the artist, and the value are the set of the songs of this artist.
         *
         * A class implementing this interface must have a constructor which takes as argument a String
         * representing the path to the input file, and filling a data structure using data of this file.
         * The format of this file is, for each line : the name of the artist, followed by a tabulation (\t),
         * itself followed by the name of the song, and then an 'end of line' character (\n).
         * It should also have a constructor which takes no argument, and creates an empty OrderedMap.
         */
        public interface OrderedMap {

            // Methods of the Map ADT

            public int size();

            public boolean isEmpty();

            public Set<String> get(String key);

            public Set<String> put(String key, Set<String> value);

            public Set<String> remove(String key);

            public Set<String> keySet();

            public Collection<Set<String>> values();

            public Set<Map.Entry<String, Set<String>>> entrySet();


            // Methods of the Ordered Map ADT

            public Map.Entry<String, Set<String>> firstEntry();

            public Map.Entry<String, Set<String>> lastEntry();

            public Map.Entry<String, Set<String>> ceilingEntry(String key);

            public Map.Entry<String, Set<String>> floorEntry(String key);

            public Map.Entry<String, Set<String>> lowerEntry(String key);

            public Map.Entry<String, Set<String>> higherEntry(String key);


            // Additional methods

            /* Same as the 'get' method, but instead of returning a Set,
             * returns a String[] containing the values ordered by name.
             * If there is no such key in the map, returns an empty array of Strings.
             * You MUST use the QuickSort algorithm to sort the values,
             * and you MUST implement it by yourself (do NOT use Arrays.sort). */
            public String[] getOrdered(String key);

            /* Returns a List containing all entries of this Map with keys between 'lowest' and 'highest',
             * including them (if they exist). This list must be sorted by key name.
             * If there is no such entries, returns an empty List<Map.Entry<String, Set<String>>>.
             * Complexity required : O(x + log n) where n is the total number of entries in the map,
             * and x is the number of entries between 'lowest' and 'highest'. */
            public List<Map.Entry<String, Set<String>>> entriesBetween(String lowest, String highest);

            /* Returns a String corresponding to the data stored in this Map.
             * This String should contain one pair of artist and song per line,
             * following this structure : [artistName] songName
             * Order those lines by artist name, and for the same artist by song name.  */
            public String toString();

        }

    Some final tips in order to pass this task :

    - Your OrderedMap should be ordered according to the natural ordering of its keys, i.e. the same as the Java String class.

    - If you create your own Map.Entry implementation, don't forget to override the *equals* and *hashCode* methods so that two different objects representing the same entry are considered equal.

    - For more information about the methods of the two ADTs, you can look at :
        - http://docs.oracle.com/javase/7/docs/api/java/util/Map.html
        - http://docs.oracle.com/javase/7/docs/api/java/util/NavigableMap.html

    - The Sets/Collections returned by your methods *don't* need to be backed by the map. (If you don't understand this, just forget about it.)
environment: java8scala
groups: true
limits:
    memory: '3000'
    output: '100'
    time: '40'
name: Mission 3 - Ordered Map [group]
network_grading: false
order: 12
problems:
    ordered_map:
        allowed_exts:
        - .java
        type: code-file
        header: 'Upload the file containing your implementation here. The class representing
            your ordered map should be named *SearchTree* and implement *OrderedMap*. '
        name: SearchTree
weight: 1.0
