accessible: false
author: Xavier Gillard, Pierre Schaus
context: |-
    Les filtres de Bloom
    --------------------
    Un filtre de Bloom, est une structure de donnée très compacte et efficace qui permet d'implémenter un test d'appartenance rapide (_.contains()_) à un très grand *ensemble*. Cependant, contrairement au test d'appartenance à un ensemble tel qu'implémenté à l'aide d'une HashMap, le test d'appartenance implémenté via un filtre de bloom peut renvoyer un résultat erroné (faux positifs possibles mais pas de faux négatifs) dans certains cas et cela, avec une faible probabilité.

    L'efficacité de cette structure, et le fait qu'elle ne requière qu'une quantité très faible (et constante !) de mémoire quel que soit le nombre d'éléments contenus dans l'ensemble en ont fait une structure de choix pour un très grand nombre d'applications. A titre d'exemple, on mentionnera le fait que les filtres de Bloom sont utilisés par certains devices réseaux pour faire du *Deep Packet Inspection*, ou encore que les bases de données *Google Big Table*, *Apache Cassandra* ou encore *Postgresql* utilisent cette structure de donnée afin de tester si une donnée se trouve en cache ou non.

    En effet la recherche de la donnée étant généralement coûteuse,
    un filtre de Bloom est utilisé pour éviter de faire une recherche
    si la donnée n'est pas présente. Par contre comme les erreurs de type faux-positifs sont possibles, le filtre de Bloom peut dire que la donnée s'y trouve alors que ça n'est pas vrai. Dans ce cas, il faudra effectuer la recherche pour vérifier et payer le coût de celle recherche (par exemple une recherche linéaire avec des accès
    sur le disque).

    Concrètement
    ------------
    Concrètement, un filtre de bloom consiste en un vecteur $V = v_1..v_n$ de bits et d'un ensemble $F = f_1..f_k$ de fonctions de hachage.

    Pour ajouter un élément $X$ dans le set, on applique successivement chacune des fonctions $f_i \in F$ de hachage. L'application de chacune de ses fonctions à l'élément $X$ renvoie un nombre $h_i \in \left[0..n\right]$. Pour marquer l'ajout de $X$ au filtre de bloom, on sette simplement chacun de $v_{h_i}$ bits dans $V$.

    De façon similaire, pour tester l'appartenance d'un élément $X$ au set, on vérifie que le $h_i$ ème bit $\in V$ correspondant à $f_i(X)$ est setté à `on`. Le test d'appartenance ne renverra `true` que ssi, cette condition est vérifiée pour chacune des $f_i \in F$.

    Exemples
    ~~~~~~~~
    ```
    En supposant qu'on ait un filtre de Bloom représenté par 1 byte et 3 fonctions de hachage telles que:

    f1("Salut") = 0
    f2("Salut") = 1
    f3("Salut") = 2

    et

    f1("1121") = 0
    f2("1121") = 1
    f3("1121") = 4

    L'ajout de "Salut" au filtre 00000000 transforme celui-ci en 11100000. Si par la suite on veut tester que "Salut" est bien présent dans le filtre, on s'assure que les bits v1, v2 et v3 sont bien == 1.

    En continuant sur le même exemple, on voit que la chaine "1121" n'est pas présente dans la structure puisque le 4eme bit est 'off'.
    ```

    Autre exemple d'utilisation
    ---------------------------
    Outre le caching, les filtres de Bloom sont aussi utilisés pour donner une estimation du nombre d'éléments contenus dans un ensemble.

    On calcule cette estimation ($n^*$) comme suit:
    $ n^* = -\frac{n}{k} ln \left( 1 - \frac{X}{n} \right)$

    avec n = la taille du filtre de Bloom, k = le nombre de fonctions de hachage différentes utilisées et X = le nombre des bits `on` dans le filtre.
environment: python3
evaluate: best
groups: false
limits:
    output: '2'
    time: '30'
    memory: '100'
name: Pré-examen - Bloom Filters
network_grading: false
problems:
    complexite_temp_ajout:
        choices:
        -   text: $O(1)$
        -   text: $\Omega(1)$
        -   text: $\Theta(1)$
        -   text: $O(n)$
        -   text: $\Omega(n)$
        -   text: $\Theta(n)$
        -   text: $O(k)$
        -   text: $\Omega(k)$
        -   text: $\Theta(k)$
            valid: true
        -   text: On ne peut pas ajouter un élément à un filtre de Bloom.
        header: ''
        type: multiple-choice
        limit: 0
        name: Quelle est la complexité d'un ajout d'un élément dans le filtre de Bloom
            ?
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
weight: 1.0
