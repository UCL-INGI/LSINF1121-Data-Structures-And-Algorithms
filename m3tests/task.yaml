accessible: true
author: Simon Hardy, Frédéric Kaczynski
context: |-
    For this task, you have to write unit tests using JUnit in order to check several OrderedMap implementations (the interface of OrderedMap is available in the next task). You are given one class, *SearchTree*, and you have to determine if it does its job correctly or not. We provide you a template to begin writing your tests :

    .. code-block:: java

        import org.junit.Test;
        import static org.junit.Assert.assertEquals;
        import static org.junit.Assert.assertTrue;
        import static org.junit.Assert.fail;
        import java.util.Set;
        import java.util.HashSet;

        public class SearchTreeTests {

            @Test
            public void firstTest() {
            try {
                OrderedMap tree = new SearchTree();
                String key = "Foo Fighters";
                Set<String> value = new HashSet<String>();
                value.add("The Pretender");
                assertEquals(tree.put(key, value), null);
                assertEquals(tree.size(), 1);
                assertEquals(tree.isEmpty(), false);
                Set<String> result = tree.get(key);
                assertEquals(result.size(), 1);
                assertTrue(result.contains("The Pretender"));
            } catch (Exception e) {
                fail("Exception occured : " + e);
            }
            }

            @Test
            public void secondTest() {
                // TODO...
            }
        }

    Note that you can't provide custom text files for this task, but a small subset of the file *songs.txt* is available in the same folder as your tester, and under the same name. It contains only the 50 first lines of the original file.
environment: java8scala
evaluate: best
groups: false
limits:
    memory: '512'
    time: '180'
    output: '100'
name: Mission 3 - Unit tests [individual]
network_grading: false
order: 10
problems:
    tests:
        allowed_exts:
        - .java
        header: 'Upload your file here, with only one class named *SearchTreeTests*.
            The class representing the implementation under test is called *SearchTree*,
            as written in the template. '
        name: Unit tests
        type: code-file
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
weight: 1.0
