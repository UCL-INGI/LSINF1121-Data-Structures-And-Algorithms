#! /bin/bash
# BuggySearchTree : 
# 1 : !isEmpty()
# 2 : remove doesn't remove anything
# 3 : constructor with String argument does same as no argument constructor
# 4 : constructor with String argument only treats the 2 first lines of the file
# 5 : ceilingEntry and floorEntry are inversed. 
# 6 : firstEntry() actually returns the second entry. 
# 7 : getOrdered doesn't sort the songs
# 8 : entriesBetween returns entries STRICTLY in the range (should be inclusive)
# 9 : entriesBetween returns entries from 'lowest' (but to the max, not to 'highest')
# 10 : toString format not respected

tot=11 # number of tests
name="SearchTree"
testName="${name}Tests"
word="OrderedMap"

getinput tests > "student/$testName.java"
cp junit-4.12.jar student/junit-4.12.jar
cp hamcrest-core-1.3.jar student/hamcrest-core-1.3.jar
cp OrderedMap.java student/OrderedMap.java
cp songs.txt student/songs.txt
cd student

n=0 # number of tests passed
passOk=0
failOk=0
buggyName="Buggy$name"
oldName="$name"

for i in $(seq 1 $tot)
do
	
	cp "../${name}.java" "./${oldName}.java"
	name="${buggyName}${i}"

	javac "${oldName}.java"

	# Compile the student code and parse it properly
	compilationMessage=$(javac -cp .:junit-4.12.jar "${testName}.java" 2>&1)
	compilationMessage=$(echo "$compilationMessage" | sed -e 's/^/\t/' | sed -e 's/%/%%%/g')
	compilationMessage=$(printf "Compilation of $testName.java failed :\n::\n\n $compilationMessage")
	if [ ! -f "$testName.class" ]; then
    	feedback --result failed --feedback "$compilationMessage"
    	exit 0
	fi

	output=$(run_student java -cp .:junit-4.12.jar:hamcrest-core-1.3.jar org.junit.runner.JUnitCore "$testName")
    r=$?
    
	if [ "$r" = "252" ]; then
		feedback --result failed --feedback "Command was killed due to an out-of-memory"
		exit 0
	elif [ "$r" = "253" ]; then
		feedback --result timeout --feedback "Command timed out"
		exit 0
	elif [ "$r" = "254" ]; then
	      feedback --result failed --feedback "Unfortunately, a runtime error occured"
		exit 0
	fi

	failed=$(echo "$output" | grep -c "FAILURES")
    passed=$(echo "$output" | grep -c "OK")

	if [ "$i" = "1" ] && [ "$failed" = "0" ] && [ "$passed" != "0" ]; then
		((n++))
		((passOk++))
	fi

	if [ "$i" != "1" ] && [ "$failed" = "1" ] && [ "$passed" = "0" ]; then
		((n++))
		((failOk++))
	fi
done
cd ..

if [ "$passOk" != "1" ]; then
	feedback --result failed --feedback "you detected an error in a correct $word implementation"
elif [ "$n" = "$tot" ]; then
	feedback --result success --feedback "Congratulations, you passed the $n tests!"
else
	lack=$(($tot-1-$failOk))
	feedback --result failed --feedback "Unfortunately, you passed only $n tests out of $tot : you didn't detect errors in $lack incorrect ${word} implementations. "
fi