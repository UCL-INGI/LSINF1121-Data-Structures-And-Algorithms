#! /bin/bash
# BuggySearchTree :
# 1 : !isEmpty()
# 2 : remove doesn't remove anything
# 3 : constructor with String argument does same as no argument constructor
# 4 : constructor with String argument only treats the 2 first lines of the file
# 5 : ceilingEntry and floorEntry are inversed.
# 6 : firstEntry() actually returns the second entry.
# 7 : getOrdered doesn't sort the songs
# 8 : entriesBetween returns entries STRICTLY in the range (should be inclusive)
# 9 : entriesBetween returns entries from 'lowest' (but to the max, not to 'highest')
# 10 : toString format not respected

###################################
# Test configuration
###################################

tot=11 # number of tests
problemId="tests"
name="SearchTree"
testName="SearchTreeTests"
interfaceName="OrderedMap"
buggyName="BuggySearchTree"
buggyFeedbacks=(
	""
	""
	"A file \"songs.txt\" is provided to you for this test"
	"A file \"songs.txt\" containgin 50 songs is provided to you for this test"
	"ceilingEntry() failed test"
	"firstEntry() failed test"
	"getOrdered() failed test"
	"The specification of a method that returns an interval states wether the set is inclusive or not, i.e. if the set contains the \"border\" values."
	"Unit tests should check if the set returned by a method doesn't contain more values than it should"
	"toString() failed test"
)

# SPECIFIC FOR THIS TEST
cp songs.txt student/songs.txt

####################################
# Execution of the tests
####################################
getinput "${problemId}" > "student/$testName.java"
cp junit-4.12.jar student/junit-4.12.jar
cp hamcrest-core-1.3.jar student/hamcrest-core-1.3.jar
cp "${name}.java" "student/${name}.java"
cp "${interfaceName}.java" "student/${interfaceName}.java"
cd student

incorrect=$(( $tot-1 ))
n=0 # number of tests passed
passOk=0
failOk=0
oldName="$name"
feedbackMessages=""

# This loop first checks with the correct implementation, and then
# with the ${tot-1} incorrect ones
for i in $(seq 1 $tot)
do
	cp "../${name}.java" "./${oldName}.java"
	name="${buggyName}${i}"
	javac "${oldName}.java"

	# Compile the student code and parse it properly
	compilationMessage=$(javac -cp .:junit-4.12.jar "${testName}.java" 2>&1)
	r=$?
	compilationMessage=$(echo "$compilationMessage" | sed -e 's/^/\t/' | sed -e 's/%/%%%/g')
	compilationMessage=$(printf "Compilation of $testName.java failed :\n::\n\n $compilationMessage")
	if [ "$r" = "1" ]; then
		feedback --result failed --feedback "$compilationMessage"
		exit 0
	fi

	output=$(run_student java -cp .:junit-4.12.jar:hamcrest-core-1.3.jar org.junit.runner.JUnitCore "$testName")
	retval=$?
	echo -e "${retval}\n"
	if [ "$retval" = "252" ]; then
		feedback --result failed --feedback "Command was killed due to an out-of-memory"
		exit 0
	elif [ "$retval" = "253" ]; then
		feedback --result timeout --feedback "Command timed out"
		exit 0
	elif [ "$retval" = "254" ]; then
		  feedback --result failed --feedback "Unfortunately, a runtime error occured"
		exit 0
	fi

	failed=$(echo "$output" | grep -c "FAILURES")
	passed=$(echo "$output" | grep -c "OK")

	if [ "$i" != "0" ]; then
		# This is the first test, we're testing against the correct implementation
		if [ "$failed" = "0" ] && [ "$passed" != "0" ]; then
			((n++))
			((passOk++))
		fi

	else
		# We're testing against an incorrect implementation
		if [ "$failed" = "1" ] && [ "$passed" = "0" ]; then
			((n++))
			((failOk++))
		else
			# We add a feedback message for the user
			index=$((i - 1))
			feedbackLine=${buggyFeedbacks[$index-1]}
			if [[ -z "$feedbackLine" ]]; then
				feedbackLine="Failed test"
			fi
			feedbackMessages="${feedbackMessages}Test #$index: $feedbackLine\n\n"
		fi
	fi
done
cd ..

if [ "$n" = "0" ]; then
	feedback --result failed --feedback "It seems like an internal error occured. If this persists, please contact your course administrator. "
elif [ "$passOk" != "1" ]; then
	feedback --result failed --feedback "You detected an error in a correct implementation"
elif [ "$n" = "$tot" ]; then
	feedback --grade 100 --result success --feedback "Congratulations, you passed the ${incorrect} tests!"
else
	errors=$(( incorrect - failOk ))
	grade=$(( (100 * (failOk)) / $incorrect ))

	feedback-grade $grade
	feedback-result failed

	# We only print the test feedbacks if the student has not more
	# than 3 failed tests
	if [ "$errors" -le "3" ]; then
		feedback-msg -ae -m "${feedbackMessages}"
	fi

	feedback-msg -ae -m "You detected errors in only $failOk (out of $incorrect) incorrect implementations."
fi
