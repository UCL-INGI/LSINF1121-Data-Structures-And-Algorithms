accessible: false
author: Xavier Gillard
context: |
    A la page 777 du livre "Algorithms" 4th edition, on vous propose l'implémentation suivante de l'algorithme de Rabin Karp.

    .. code::

        public class RabinKarp {
          private String pat;      // the pattern  // needed only for Las Vegas
          private long patHash;    // pattern hash value
          private int m;           // pattern length
          private long q;          // a large prime, small enough to avoid long overflow
          private int R;           // radix
          private long RM;         // R^(M-1) % Q

          public RabinKarp(String pat) {
              this.pat = pat;      // save pattern (needed only for Las Vegas)
              R = 256;
              m = pat.length();
              q = longRandomPrime();

              // precompute R^(m-1) % q for use in removing leading digit
              RM = 1;
              for (int i = 1; i <= m-1; i++)
                  RM = (R * RM) % q;
              patHash = hash(pat, m);
          }

          // Compute hash for key[0..m-1].
          private long hash(String key, int m) {
              long h = 0;
              for (int j = 0; j < m; j++)
                  h = (R * h + key.charAt(j)) % q;
              return h;
          }

          // Monte Carlo
          private boolean check(int i) {
              return true;
          }

          // Returns the index of the first occurrrence of the pattern string in the text string.
          public int search(String txt) {
              int n = txt.length();
              if (n < m) return n;
              long txtHash = hash(txt, m);

              // check for match at offset 0
              if ((patHash == txtHash) && check(txt, 0))
                  return 0;

              // check for hash match; if hash match, check for exact match
              for (int i = m; i < n; i++) {
                  // Remove leading digit, add trailing digit, check for match.
                  txtHash = (txtHash + q - RM*txt.charAt(i-m) % q) % q;
                  txtHash = (txtHash*R + txt.charAt(i)) % q;

                  // match
                  int offset = i - m + 1;
                  if ((patHash == txtHash) && check(txt, offset))
                      return offset;
              }

              // no match
              return n;
          }


          // a random 31-bit prime
          private static long longRandomPrime() {
              BigInteger prime = BigInteger.probablePrime(31, new Random());
              return prime.longValue();
          }

        }
environment: mcq
evaluate: best
groups: false
limits:
    output: '2'
    time: '30'
    memory: '100'
name: Pre-examen - Rabin Karp
network_grading: false
order: 26
problems:
    propositions:
        choices:
        -   text: La complexité de cet algorithme est :math:`O(nm)`
            feedback: :math:`O(nm)` est la complexité d'une recherche brute force.
                Cette implémentation est dite `Monte Carlo` et sa complexité est :math:`O(n)`
        -   text: La complexité de cet algorithme est :math:`O(n)`
            valid: true
        -   text: La complexité de cet algorithme est :math:`O\left(n~log_2(m)\right)`
            feedback: Le logarithme n'a aucune raison d'être. Cette implémentation
                est dite `Monte Carlo` et sa complexité est :math:`O(n)`
        -   feedback: Il n'y a aucune raison pour qu'n apparaise en exposant. Cette
                implémentation est dite `Monte Carlo` et sa complexité est :math:`O(n)`
            text: La complexité de cet algorithme est :math:`O(m^n)`
        -   text: Cet implémentation renvoie toujours un résultat correct
            feedback: C'est faux, puisqu'il ne vérifie pas que la sous-chaine trouvée
                correspond effectivement au pattern recherché, on dit que ce bout
                de code implémente la variante `Monte Carlo` de l'algorithme de Rabin
                Karp. Cet algorithme est très probablement correct, mais il y a une
                faible probabilité pour qu'il renvoie un résultat erroné (du a une
                collision sur les hash).
        -   valid: true
            text: Cet implémentation peut renvoyer un résultat incorrect.
        type: multiple-choice
        header: |
            .. note::

               Dans toutes les propositions, on suppose que:
                 * `n` dénote la longueur du texte dans lequel on recherche le pattern
                 * `m` dénote la longueur du pattern à trouver dans le texte
        limit: 0
        name: Sélectionnez les propositions correctes
        multiple: true
stored_submissions: 0
submission_limit:
    amount: 1
    period: -1
weight: 1.0
