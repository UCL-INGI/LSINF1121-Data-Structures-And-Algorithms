accessible: true
author: Simon Hardy
context: |-
    Recall the FormalExpressionTree interface :

    .. code-block:: java

        /**
         * Un "FormalExpressionTree" est un arbre permettant de mémoriser
         * et de manipuler une expression analytique.
         *
         * Une classe implémentant cette interface doit disposer d'un CONSTRUCTEUR
         * prenant comme argument une chaîne de caractères (String) et construisant
         * l'arbre associé.
         * Cette chaîne est supposée correspondre à une expression analytique
         * syntaxiquement correcte et complètement parenthésée.
         * Lorsque cette précondition n'est pas vérifiée, une  ParseException (classe à implémenter) doit être lancée.
         * Un CONSTRUCTEUR sans argument permet de construire un arbre élémentaire
         * correspondant à l'expression vide "".
         *
         */
        public interface FormalExpressionTree {
          /**
           * Cette méthode renvoie une chaîne de caractères correspondant à
           * l'expression analytique représentée dans l'arbre.
           *
           * @pre  this représente une expression analytique syntaxiquement correcte
           * @post une chaîne de caractères, correspondant à l'expression analytique
           *       complètement parenthésée représentée par this, est renvoyée.
           */
          public String toString();

          /**
           * Cette méthode calcule le nouvel arbre correspondant à la dérivée formelle
           * de l'arbre courant. L'arbre courant (this) n'est pas modifié.
           *
           * @pre   this représente une expression analytique syntaxiquement correcte.
           * @post  Une référence à un nouvel arbre représentant la dérivée formelle
           *        de this est renvoyée.
           */
          public FormalExpressionTree derive();
        }

    You are asked to write unit tests (using JUnit) in order to check wether a particular implementation of this interface is correct.

    Here is a simple template you can use to write your tests :

    .. code-block:: java

        import org.junit.Test;
        import static org.junit.Assert.assertEquals;
        import javax.script.ScriptEngineManager;
        import javax.script.ScriptEngine;
        import javax.script.ScriptException;

        public class TreeTests {

            // This template uses JavaScript to evaluate the derived expressions in a particular value, which allows to compare two derivatives easily.
            ScriptEngineManager manager = new ScriptEngineManager();
            ScriptEngine engine = manager.getEngineByName("JavaScript");

            @Test
            public void firstTest() {
                String myResult = evaluateDerivative("(2*(x^3))", "2");
                assertEquals(myResult, "24.0");  // the eval function returns float numbers
            }

            @Test
            public void secondTest() {
                ...
            }

            /* Derives 'expression' and evaluates it in 'value' */
            public String evaluateDerivative(String expression, String value) {
                String myResult = "";
                try {
                    ExpressionTree tree = new ExpressionTree(expression);
                    ExpressionTree derivedTree = tree.derive();
                    String derivative = derivedTree.toString();
                    ExpressionTree tempTree = new ExpressionTree(derivative);
                    derivative = tempTree.toStringJs(); // toStringJs() does the same job as toString(), but prints "Math.pow(a, b)" instead of "a^b" (needed so that JavaScript can interpret it).
                    try {
                        // Do some replacements so that JavaScript can interpret everything correctly
                        Object result = engine.eval(derivative.replace("x", value).replace("sin", "Math.sin").replace("cos", "Math.cos").replace("--", "+"));
                        myResult = result.toString();
                    } catch (ScriptException e) {
                        System.out.println("Exception thrown : " + e);
                    }
                } catch (Exception e) {
                    System.out.println("Exception thrown : " + e);
                }
                return myResult;
            }
        }
environment: java8scala
groups: false
limits:
    memory: '512'
    output: '100'
    time: '45'
name: Mission 2 - Unit tests [individual]
order: 7
problems:
    tree_tests:
        allowed_exts:
        - .java
        type: code-file
        name: Unit tests for the formal expression tree
        header: Upload your file here, with only one class named "TreeTests". The
            class representing the tree under test is called *ExpressionTree*, as
            written in the template !
weight: 1.0
