accessible: true
author: Simon Hardy
context: |-
    Recall the FormalExpressionTree interface :

    .. code-block:: java

        /**
         * Un "FormalExpressionTree" est un arbre permettant de mémoriser
         * et de manipuler une expression analytique.
         *
         * Une classe implémentant cette interface doit disposer d'un CONSTRUCTEUR
         * prenant comme argument une chaîne de caractères (String) et construisant
         * l'arbre associé.
         * Cette chaîne est supposée correspondre à une expression analytique
         * syntaxiquement correcte et complètement parenthésée.
         * Une gestion d'exceptions doit être prévue lorsque cette précondition n'est pas vérifiée.
         *
         * Un CONSTRUCTEUR sans argument permet de construire un arbre élémentaire
         * correspondant à l'expression vide "".
         *
         */
        public interface FormalExpressionTree {
          /**
           * Cette méthode renvoie une chaîne de caractères correspondant à
           * l'expression analytique représentée dans l'arbre.
           *
           * @pre  this représente une expression analytique syntaxiquement correcte
           * @post une chaîne de caractères, correspondant à l'expression analytique
           *       complètement parenthésée représentée par this, est renvoyée.
           */
          public String toString();

          /**
           * Cette méthode calcule le nouvel arbre correspondant à la dérivée formelle
           * de l'arbre courant. L'arbre courant (this) n'est pas modifié.
           *
           * @pre   this représente une expression analytique syntaxiquement correcte.
           * @post  Une référence à un nouvel arbre représentant la dérivée formelle
           *        de this est renvoyée.
           */
          public FormalExpressionTree derive();
        }

    You are asked to write unit tests (using JUnit) in order to check wether a particular implementation of this interface is correct.

    Here is a simple template you can use to write your tests :

    .. code-block:: java

        import org.junit.Test;
        import static org.junit.Assert.assertEquals;
        import javax.script.ScriptEngineManager;
        import javax.script.ScriptEngine;
        import javax.script.ScriptException;

        public class TreeTests {

        // Use JavaScript to evaluate the derived expressions in a particular value in order to compare them easier
        ScriptEngineManager manager = new ScriptEngineManager();
        ScriptEngine engine = manager.getEngineByName("JavaScript");


            @Test
            public void firstTest() {
                String myResult = evaluate("(2*(x^2))", "7")
                assertEquals(myResult, "28");
            }

            @Test
            public void secondTest() {
                ...
            }

            public String evaluate(String expression, String value) {
                ExpressionTree tree = new ExpressionTree(expression);
                ExpressionTree derivedTree = tree.derive();
                String derivative = derivedTree.toString();
                String myResult = "";
                try {
                    Object result = engine.eval(derivative.replace("x", value).replace("sin", "Math.sin").replace("cos", "Math.cos").replace("--", "+"));
                    myResult = result.toString();
                } catch (ScriptException e) {
                    // handle exception
                }
            }
        }
environment: java8scala
groups: false
limits:
    memory: '512'
    output: '100'
    time: '30'
name: Mission 2 - Unit tests [individual]
problems:
    tree_tests:
        allowed_exts:
        - .java
        type: code-file
        name: Unit tests for the formal expression tree
        header: Upload your file here, with only one class named "TreeTests". The
            class representing the tree under test is called *ExpressionTree*, as
            written in the template !
weight: 1.0
