accessible: 2018-10-29 17:00:00/2019-10-29 17:00:00
author: John Aoga
context: |-
    On s’intéresse à l'implémentation d'un itérateur (``BSTIterator``) qui permet de traverser un ``Binary Search Tree`` dans l'ordre croissant (*In-order transversal*).

    Par exemple si on a ce BST,

    .. figure:: PART3OrderedBstIterator/bst.png
       :scale: 70 %
       :alt: alternate text
       :align: center
       :figclass: align-center

    on veut le parcourir comme suit *[3,8,9,11,12,14,15,18,20]*

    *Attention:* L'itérateur devra lancer des exceptions dans les cas suivants:

    - étant donnée qu'on ne peut modifier l'itérateur alors qu'on est en train d'itérer,  l'iterateur devra lancer un ``ConcurrentModificationException`` dans ce cas dans le ``next`` et le ``hasNest``;

    - si le ``next`` est appelé alors qu'il n'y a plus de prochain élément,  l'iterateur devra lancer un ``NoSuchElementException``.

    .. code-block:: java

       import java.util.ConcurrentModificationException;
       import java.util.Iterator;
       import java.util.NoSuchElementException;
       import java.util.Stack;

          public class BST<Key extends Comparable<Key>, Value> implements Iterable<Key> {
           private Node root;             // root of BST

           private class Node {
               private final Key key;       // sorted by key
               private Value val;           // associated data
               private Node left, right;    // left and right subtrees
               private int size;            // number of nodes in subtree

               public Node(Key key, Value val, int size) {
                   this.key = key;
                   this.val = val;
                   this.size = size;
               }

               public int getSize() {
                   return size;
               }
           }

           /**
            * Initializes an empty symbol table.
            */
           public BST() {}

           /**
            * Returns true if this symbol table is empty.
            * @return {@code true} if this symbol table is empty; {@code false} otherwise
            */
           public boolean isEmpty() {
               return size() == 0;
           }

           /**
            * Returns the number of key-value pairs in this symbol table.
            * @return the number of key-value pairs in this symbol table
            */
           public int size() {
               return size(root);
           }

           // return number of key-value pairs in BST rooted at x
           private int size(Node x) {
               if (x == null) return 0;
               else return x.size;
           }

           public void inOrder(){
               inOrder(root);
           }
           private void inOrder(Node x) {
               if (x == null) return;

               inOrder(x.left);
               System.out.println(x.key+"=>"+x.val);
               inOrder(x.right);
           }

           /**
            * Returns the value associated with the given key.
            *
            * @param  key the key
            * @return the value associated with the given key if the key is in the symbol table
            *         and {@code null} if the key is not in the symbol table
            */
           public Value get(Key key) {
               return get(root, key);
           }

           private Value get(Node x, Key key) {
               if (x == null) return null;
               int cmp = key.compareTo(x.key);
               if      (cmp < 0) return get(x.left, key);
               else if (cmp > 0) return get(x.right, key);
               else              return x.val;
           }

           /**
            * Search for key, update value if key is found. Grow table if key is new.
            *
            * @param  key the key
            * @param  val the value
            */
           public void put(Key key, Value val) {
               root = put(root, key, val);
           }
           private Node put(Node x, Key key, Value val) {
               if (x == null) return new Node(key, val, 1);
               int cmp = key.compareTo(x.key);
               if      (cmp < 0) x.left  = put(x.left,  key, val);
               else if (cmp > 0) x.right = put(x.right, key, val);
               else              x.val   = val;
               x.size = 1 + size(x.left) + size(x.right);
               return x;
           }

           /**
            * Returns an iterator that iterates through the keys in Incresing order
            * (In-Order transversal).
            * @return an iterator that iterates through the items in FIFO order.
            */
           @Override
           public Iterator<Key> iterator() {
               return new BSTIterator();
           }

               /**
         * Implementation of an iterator that iterates through the keys of BST in incresing order (In-order transversal).
         *
         */
           private class BSTIterator implements Iterator<Key> {

               // TODO STUDDENT: Implement the BSTIterator

           }
       }


    `Le projet IntelliJ est disponible ici </course/LSINF1121-2016/PART3OrderedBstIterator/LSINF1121_PART3_OrderedBstIterator.zip>`_.
environment: java8scala
evaluate: best
groups: false
input_random: '0'
limits:
    memory: '1000'
    time: '300000'
    output: '2'
name: PART 3 - Binary Search Tree Iterator (implem)
network_grading: false
order: 16
problems:
    bstiterator:
        type: code
        name: 'Implementation de l''iterateur: BSTIterator'
        language: java
        default: ''
        header: |-
            .. code-block:: java

                /**
                 * Implementation of an iterator that iterates through the keys of BST in incresing order (In-order transversal).
                 *
                 */
                   private class BSTIterator implements Iterator<Key> {

                       // TODO STUDDENT: Implement the BSTIterator

                   }

            Copier le contenu de la class ``private class BSTIterator implements Iterator<Key>`` ci-desssous.
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
weight: 1.0
