accessible: true
author: Simon Hardy
context: |-
    For this mission, you are asked to implement Kruskal algorithm in order to compute the minimum spanning tree corresponding to an input file. As a reminder, we impose two implementation details :
    - The priority queue should be replaced by a Radix-Sort using one Bucket-Sort per digit as explained in the statement pdf,
    - You have to use a Union/Find structure to handle the clusters (this doesn't change from the pseudo-code of the book).

    Concretely, you have to write one program : *Kruskal.java*, which reads the file located at argv[0] and writes the result in a new file located at argv[1]. The output format must be the same as for the input.

    Additional informations :
    - The input file format is valid.
    - The graph represented by the input file is connected.
    - All edges have a cost strictly greater than 0 (which means the number of edges will always be the number of nodes minus 1).
    - There can not be 2 edges with same end vertices.
    - The cities can be represented by any positive integer (not necessary consecutive).
environment: java8scala
groups: true
limits:
    memory: '512'
    output: '100'
    time: '30'
name: Mission 6 - Minimum spanning tree [group]
problems:
    kruskal:
        type: code-file
        header: 'Upload your file here. Your class should be named *Kruskal* and take
            two arguments as explained above. If you need other classes, just put
            them at the end of this file, without the *public* modifier. '
        allowed_exts:
        - .java
        name: Kruskal
weight: 1.0
