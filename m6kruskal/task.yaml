accessible: 2016-12-05 10:30:00/2016-12-09 08:30:00
author: Simon Hardy
context: |-
    For this mission, you are asked to implement Kruskal algorithm in order to compute the minimum spanning tree corresponding to an input file. As a reminder, we impose one implementation detail (which won't be checked on INGInious, but manually by the tutors) :

    - You have to use a Union/Find structure to handle the clusters (this doesn't change from the pseudo-code of the book).

    Concretely, you have to write one program : *Kruskal.java*, which reads the file located at argv[0] and writes the result in a new file located at argv[1]. The output format must be the same as for the input.

    Additional informations :

    - The input file format is valid.

    - The graph represented by the input file is connected.

    - All edges have a cost strictly greater than 0 (which means the number of edges will always be the number of nodes minus 1).

    - There can not be 2 edges with same end vertices.

    - The cities can be represented by any positive integer (not necessarily consecutive).
environment: java8scala
evaluate: best
groups: true
limits:
    memory: '512'
    output: '100'
    time: '30'
name: Mission 6 - Minimum spanning tree [group]
network_grading: false
order: 23
problems:
    kruskal:
        header: 'Upload your file here. Your class should be named *Kruskal* and take
            two arguments as explained above. If you need other classes, just put
            them at the end of this file, without the *public* modifier. '
        name: Kruskal
        allowed_exts:
        - .java
        type: code-file
stored_submissions: 0
submission_limit:
    amount: -1
    period: -1
weight: 1.0
